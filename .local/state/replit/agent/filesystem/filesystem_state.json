{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Digital House - Community Networking Platform\n\n## Overview\n\nDigital House is a comprehensive community-based social networking platform designed to reconnect Indian diaspora members globally. The platform now features two versions:\n\n**Version 1.0** - Core community features including member networking, cultural events, emergency help system, and business connections.\n\n**Version 2.0** - Enhanced platform with AI-powered matrimony matching, comprehensive job portal, and advanced business networking hub alongside all original features.\n\nThe application provides dedicated spaces for personal networking, business promotion, job opportunities, matrimony matching with cultural compatibility, and real-time help requests. It promotes cultural events, education, and entrepreneurship while enabling both social interactions and professional growth.\n\nThe application is built as a full-stack TypeScript web application using modern development practices and follows a modular, domain-based architecture pattern with dual-version support.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Components**: Radix UI primitives with custom shadcn/ui component library\n- **Styling**: TailwindCSS with CSS variables for theming and responsive design\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation schemas\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with type-safe database queries\n- **API Design**: RESTful API with `/api/v1` prefix and consistent JSON response format\n- **Authentication**: Replit Auth integration with OpenID Connect\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Database Design\n- **Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Schema Structure**: Normalized relational design with proper foreign key relationships\n- **Key Tables**: \n  - **V1.0**: users, posts, connections, events, help_requests, messages with supporting tables for likes, comments, and RSVPs\n  - **V2.0**: matrimony_profiles, jobs, job_applications, businesses, matrimony_interests for enhanced features\n\n### Authentication & Authorization\n- **Primary Auth**: Replit OpenID Connect with passport.js strategy\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Middleware**: Custom authentication middleware for route protection\n- **User Roles**: Role-based access with individual, business, and organization types\n\n### Data Layer\n- **Storage Interface**: Abstract storage interface with concrete implementations\n- **Repository Pattern**: Centralized data access methods for each domain\n- **Type Safety**: Full TypeScript integration with Drizzle's type inference\n- **Query Optimization**: Efficient queries with proper indexing and relationships\n\n### API Architecture\n- **Route Organization**: Modular route handlers grouped by domain\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n- **Input Validation**: Zod schemas for request validation\n- **Response Format**: Consistent JSON response structure with data, message, and error fields\n\n### Development Tooling\n- **Build System**: Vite for frontend bundling and esbuild for backend compilation\n- **Code Quality**: TypeScript strict mode with path aliases for clean imports\n- **Development Server**: Hot module reloading with Vite middleware integration\n- **Environment**: Environment-based configuration with proper secret management\n\n## External Dependencies\n\n### Database Services\n- **Neon PostgreSQL**: Serverless PostgreSQL database with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with automatic migrations\n\n### Authentication Services  \n- **Replit Auth**: OpenID Connect authentication provider\n- **Passport.js**: Authentication middleware for Node.js\n\n### UI & Styling\n- **Radix UI**: Headless, accessible UI component primitives\n- **TailwindCSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Static type checking and enhanced developer experience\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Minimalist client-side routing library\n\n### Session & Storage\n- **connect-pg-simple**: PostgreSQL session store for Express\n- **Express Session**: Session middleware for user authentication state\n\n### Validation & Forms\n- **Zod**: TypeScript-first schema validation\n- **React Hook Form**: Performant forms library with minimal re-renders\n- **@hookform/resolvers**: Integration between React Hook Form and Zod validation\n\n## Version 2.0 Features\n\n### Enhanced Matrimony System\n- **Cultural Compatibility**: Matching based on Kulam, Natchathiram, and native place\n- **AI-Powered Matching**: Advanced algorithms for compatibility scoring\n- **Family Integration**: Support for family involvement in matrimony process\n- **Interest Management**: Express and manage matrimony interests with messaging\n\n### Comprehensive Job Portal\n- **Community-Verified Jobs**: Job postings from trusted community members\n- **Skill-Based Matching**: Advanced filtering by skills and experience\n- **Application Tracking**: Full application lifecycle management\n- **Company Profiles**: Detailed employer information and branding\n\n### Business Networking Hub\n- **Business Directory**: Comprehensive showcase of community businesses\n- **Category Management**: Organized business discovery by industry\n- **Verification System**: Community-verified business credentials\n- **Partnership Opportunities**: Connect businesses for collaboration\n\n### Version Selector\n- **Dual-Version Support**: Users can switch between V1.0 and V2.0 features\n- **Persistent Preferences**: Version selection stored in localStorage\n- **Dynamic Navigation**: Navigation adapts based on selected version","size_bytes":6256},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          50: \"var(--primary-50)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\", \n          700: \"var(--primary-700)\",\n          900: \"var(--primary-900)\",\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          500: \"var(--secondary-500)\",\n          600: \"var(--secondary-600)\",\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        accent: {\n          500: \"var(--accent-500)\",\n          600: \"var(--accent-600)\",\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        emergency: {\n          500: \"var(--emergency-500)\",\n          600: \"var(--emergency-600)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3210},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Generate a random session secret if not provided\n  const sessionSecret = process.env.SESSION_SECRET || Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n  \n  return session({\n    secret: sessionSecret,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4445},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertPostSchema, \n  insertConnectionSchema, \n  insertEventSchema, \n  insertHelpRequestSchema, \n  insertMessageSchema,\n  insertMatrimonyProfileSchema,\n  insertJobSchema,\n  insertBusinessSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User routes\n  app.put('/api/users/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      const user = await storage.updateUser(userId, updates);\n      res.json({ data: user, message: \"Profile updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  app.get('/api/users/search', isAuthenticated, async (req, res) => {\n    try {\n      const { q, limit = '10' } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n      \n      const users = await storage.searchUsers(q, parseInt(limit as string));\n      res.json({ data: users });\n    } catch (error) {\n      console.error(\"Error searching users:\", error);\n      res.status(500).json({ message: \"Failed to search users\" });\n    }\n  });\n\n  // Posts routes\n  app.post('/api/posts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertPostSchema.safeParse({ ...req.body, authorId: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid post data\", errors: validation.error.issues });\n      }\n\n      const post = await storage.createPost(validation.data);\n      res.json({ data: post, message: \"Post created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n      res.status(500).json({ message: \"Failed to create post\" });\n    }\n  });\n\n  app.get('/api/posts', isAuthenticated, async (req, res) => {\n    try {\n      const { limit = '10', offset = '0' } = req.query;\n      const posts = await storage.getPosts(parseInt(limit as string), parseInt(offset as string));\n      res.json({ data: posts });\n    } catch (error) {\n      console.error(\"Error fetching posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch posts\" });\n    }\n  });\n\n  app.post('/api/posts/:postId/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { postId } = req.params;\n      await storage.likePost(postId, userId);\n      res.json({ message: \"Post liked successfully\" });\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  app.delete('/api/posts/:postId/like', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { postId } = req.params;\n      await storage.unlikePost(postId, userId);\n      res.json({ message: \"Post unliked successfully\" });\n    } catch (error) {\n      console.error(\"Error unliking post:\", error);\n      res.status(500).json({ message: \"Failed to unlike post\" });\n    }\n  });\n\n  app.delete('/api/posts/:postId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { postId } = req.params;\n      await storage.deletePost(postId, userId);\n      res.json({ message: \"Post deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting post:\", error);\n      res.status(500).json({ message: \"Failed to delete post\" });\n    }\n  });\n\n  // Connections routes\n  app.post('/api/connections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertConnectionSchema.safeParse({ ...req.body, requesterId: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid connection data\", errors: validation.error.issues });\n      }\n\n      const connection = await storage.sendConnectionRequest(validation.data.requesterId, validation.data.receiverId);\n      res.json({ data: connection, message: \"Connection request sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending connection request:\", error);\n      res.status(500).json({ message: \"Failed to send connection request\" });\n    }\n  });\n\n  app.get('/api/connections', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const connections = await storage.getUserConnections(userId);\n      res.json({ data: connections });\n    } catch (error) {\n      console.error(\"Error fetching connections:\", error);\n      res.status(500).json({ message: \"Failed to fetch connections\" });\n    }\n  });\n\n  app.get('/api/connections/pending', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const pendingRequests = await storage.getPendingConnectionRequests(userId);\n      res.json({ data: pendingRequests });\n    } catch (error) {\n      console.error(\"Error fetching pending requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending requests\" });\n    }\n  });\n\n  app.put('/api/connections/:connectionId/accept', isAuthenticated, async (req, res) => {\n    try {\n      const { connectionId } = req.params;\n      const connection = await storage.acceptConnectionRequest(connectionId);\n      res.json({ data: connection, message: \"Connection request accepted\" });\n    } catch (error) {\n      console.error(\"Error accepting connection:\", error);\n      res.status(500).json({ message: \"Failed to accept connection\" });\n    }\n  });\n\n  app.put('/api/connections/:connectionId/reject', isAuthenticated, async (req, res) => {\n    try {\n      const { connectionId } = req.params;\n      const connection = await storage.rejectConnectionRequest(connectionId);\n      res.json({ data: connection, message: \"Connection request rejected\" });\n    } catch (error) {\n      console.error(\"Error rejecting connection:\", error);\n      res.status(500).json({ message: \"Failed to reject connection\" });\n    }\n  });\n\n  // Events routes\n  app.post('/api/events', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertEventSchema.safeParse({ ...req.body, organizerId: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid event data\", errors: validation.error.issues });\n      }\n\n      const event = await storage.createEvent(validation.data);\n      res.json({ data: event, message: \"Event created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.get('/api/events', isAuthenticated, async (req, res) => {\n    try {\n      const { limit = '10' } = req.query;\n      const events = await storage.getEvents(parseInt(limit as string));\n      res.json({ data: events });\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/rsvp', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { eventId } = req.params;\n      const { status = 'attending' } = req.body;\n      \n      await storage.rsvpToEvent(eventId, userId, status);\n      res.json({ message: \"RSVP updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating RSVP:\", error);\n      res.status(500).json({ message: \"Failed to update RSVP\" });\n    }\n  });\n\n  // Help requests routes\n  app.post('/api/help-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertHelpRequestSchema.safeParse({ ...req.body, requesterId: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid help request data\", errors: validation.error.issues });\n      }\n\n      const helpRequest = await storage.createHelpRequest(validation.data);\n      res.json({ data: helpRequest, message: \"Help request created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating help request:\", error);\n      res.status(500).json({ message: \"Failed to create help request\" });\n    }\n  });\n\n  app.get('/api/help-requests', isAuthenticated, async (req, res) => {\n    try {\n      const helpRequests = await storage.getActiveHelpRequests();\n      res.json({ data: helpRequests });\n    } catch (error) {\n      console.error(\"Error fetching help requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch help requests\" });\n    }\n  });\n\n  app.post('/api/help-requests/:helpRequestId/respond', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { helpRequestId } = req.params;\n      const { message } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ message: \"Response message is required\" });\n      }\n      \n      await storage.respondToHelpRequest(helpRequestId, userId, message);\n      res.json({ message: \"Response sent successfully\" });\n    } catch (error) {\n      console.error(\"Error responding to help request:\", error);\n      res.status(500).json({ message: \"Failed to send response\" });\n    }\n  });\n\n  // Messages routes\n  app.post('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertMessageSchema.safeParse({ ...req.body, senderId: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid message data\", errors: validation.error.issues });\n      }\n\n      const message = await storage.sendMessage(validation.data);\n      res.json({ data: message, message: \"Message sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  app.get('/api/messages/:otherUserId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { otherUserId } = req.params;\n      const messages = await storage.getUserMessages(userId, otherUserId);\n      res.json({ data: messages });\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Version 2.0 Routes - Matrimony\n  app.get('/api/matrimony/profiles', isAuthenticated, async (req, res) => {\n    try {\n      const profiles = await storage.getMatrimonyProfiles();\n      res.json({ data: profiles });\n    } catch (error) {\n      console.error(\"Error fetching matrimony profiles:\", error);\n      res.status(500).json({ message: \"Failed to fetch matrimony profiles\" });\n    }\n  });\n\n  app.get('/api/matrimony/my-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getMatrimonyProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching matrimony profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch matrimony profile\" });\n    }\n  });\n\n  app.post('/api/matrimony/profiles/:profileId/interest', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { profileId } = req.params;\n      const { message = '' } = req.body;\n      \n      await storage.expressMatrimonyInterest(userId, profileId, message);\n      res.json({ message: \"Interest expressed successfully\" });\n    } catch (error) {\n      console.error(\"Error expressing interest:\", error);\n      res.status(500).json({ message: \"Failed to express interest\" });\n    }\n  });\n\n  // Version 2.0 Routes - Jobs\n  app.get('/api/jobs', isAuthenticated, async (req, res) => {\n    try {\n      const jobs = await storage.getJobs();\n      res.json({ data: jobs });\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.post('/api/jobs', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertJobSchema.safeParse({ ...req.body, postedById: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid job data\", errors: validation.error.issues });\n      }\n\n      const job = await storage.createJob(validation.data);\n      res.json({ data: job, message: \"Job posted successfully\" });\n    } catch (error) {\n      console.error(\"Error creating job:\", error);\n      res.status(500).json({ message: \"Failed to create job\" });\n    }\n  });\n\n  app.post('/api/jobs/:jobId/apply', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { jobId } = req.params;\n      const { coverLetter = '' } = req.body;\n      \n      await storage.applyToJob(jobId, userId, coverLetter);\n      res.json({ message: \"Application submitted successfully\" });\n    } catch (error) {\n      console.error(\"Error applying to job:\", error);\n      res.status(500).json({ message: \"Failed to apply to job\" });\n    }\n  });\n\n  app.get('/api/jobs/my-applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const applications = await storage.getUserJobApplications(userId);\n      res.json({ data: applications });\n    } catch (error) {\n      console.error(\"Error fetching job applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch job applications\" });\n    }\n  });\n\n  // Version 2.0 Routes - Business Hub\n  app.get('/api/businesses', isAuthenticated, async (req, res) => {\n    try {\n      const businesses = await storage.getBusinesses();\n      res.json({ data: businesses });\n    } catch (error) {\n      console.error(\"Error fetching businesses:\", error);\n      res.status(500).json({ message: \"Failed to fetch businesses\" });\n    }\n  });\n\n  app.get('/api/businesses/categories', isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getBusinessCategories();\n      res.json({ data: categories });\n    } catch (error) {\n      console.error(\"Error fetching business categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch business categories\" });\n    }\n  });\n\n  app.post('/api/businesses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validation = insertBusinessSchema.safeParse({ ...req.body, ownerId: userId });\n      \n      if (!validation.success) {\n        return res.status(400).json({ message: \"Invalid business data\", errors: validation.error.issues });\n      }\n\n      const business = await storage.createBusiness(validation.data);\n      res.json({ data: business, message: \"Business created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating business:\", error);\n      res.status(500).json({ message: \"Failed to create business\" });\n    }\n  });\n\n  app.post('/api/businesses/:businessId/contact', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { businessId } = req.params;\n      const { message = '' } = req.body;\n      \n      await storage.contactBusiness(businessId, userId, message);\n      res.json({ message: \"Contact request sent successfully\" });\n    } catch (error) {\n      console.error(\"Error contacting business:\", error);\n      res.status(500).json({ message: \"Failed to contact business\" });\n    }\n  });\n\n  // Development-only route to create sample data\n  if (process.env.NODE_ENV === 'development') {\n    app.post('/api/dev/create-sample-data', async (req, res) => {\n      try {\n        const { createSampleData } = await import('./sampleData');\n        await createSampleData();\n        res.json({ message: \"Sample data created successfully!\" });\n      } catch (error) {\n        console.error(\"Error creating sample data:\", error);\n        res.status(500).json({ message: \"Failed to create sample data\" });\n      }\n    });\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17082},"server/sampleData.ts":{"content":"import { storage } from \"./storage\";\n\nexport async function createSampleData() {\n  console.log(\"Creating sample data for Digital House...\");\n\n  try {\n    // Sample users for the community\n    const sampleUsers = [\n      {\n        id: \"sample-user-1\",\n        email: \"priya.tamil@gmail.com\",\n        firstName: \"Priya\",\n        lastName: \"Kumari\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b47c?w=150&h=150&fit=crop&crop=face\",\n        role: \"individual\" as const,\n        userType: \"member\" as const,\n        nativePlace: \"Coimbatore\",\n        kulam: \"Brahmin\",\n        natchathiram: \"Rohini\",\n        occupation: \"Software Engineer\",\n        aboutMe: \"Software engineer passionate about Tamil culture and community building. Love organizing cultural events.\",\n        location: \"San Francisco, CA\",\n        phoneNumber: \"+1-555-0101\",\n        profileVisibility: \"public\" as const,\n        isVerified: true,\n      },\n      {\n        id: \"sample-user-2\", \n        email: \"ravi.business@gmail.com\",\n        firstName: \"Ravi\",\n        lastName: \"Shankar\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face\",\n        role: \"business\" as const,\n        userType: \"member\" as const,\n        nativePlace: \"Chennai\",\n        kulam: \"Chettiar\",\n        natchathiram: \"Bharani\",\n        occupation: \"Restaurant Owner\",\n        aboutMe: \"Running authentic South Indian restaurant chain. Active in supporting new entrepreneurs.\",\n        location: \"Toronto, Canada\", \n        phoneNumber: \"+1-416-555-0102\",\n        profileVisibility: \"public\" as const,\n        isVerified: true,\n      },\n      {\n        id: \"sample-user-3\",\n        email: \"meera.doctor@gmail.com\", \n        firstName: \"Meera\",\n        lastName: \"Iyer\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?w=150&h=150&fit=crop&crop=face\",\n        role: \"individual\" as const,\n        userType: \"member\" as const,\n        nativePlace: \"Madurai\",\n        kulam: \"Iyer\",\n        natchathiram: \"Pushya\",\n        occupation: \"Cardiologist\",\n        aboutMe: \"Cardiologist who volunteers for medical camps in the community. Mother of two.\",\n        location: \"London, UK\",\n        phoneNumber: \"+44-20-555-0103\",\n        profileVisibility: \"public\" as const,\n        isVerified: true,\n      },\n      {\n        id: \"sample-user-4\",\n        email: \"vikram.tech@gmail.com\",\n        firstName: \"Vikram\",\n        lastName: \"Patel\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face\",\n        role: \"individual\" as const,\n        userType: \"member\" as const,\n        nativePlace: \"Salem\",\n        kulam: \"Vanniyar\",\n        natchathiram: \"Mrigashira\",\n        occupation: \"AI Researcher\",\n        aboutMe: \"AI researcher working on healthcare applications. Looking to connect with tech entrepreneurs.\",\n        location: \"Austin, TX\",\n        phoneNumber: \"+1-512-555-0104\", \n        profileVisibility: \"public\" as const,\n        isVerified: true,\n      },\n      {\n        id: \"sample-user-5\",\n        email: \"anita.teacher@gmail.com\",\n        firstName: \"Anita\", \n        lastName: \"Krishnan\",\n        profileImageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face\",\n        role: \"individual\" as const,\n        userType: \"moderator\" as const,\n        nativePlace: \"Trichy\",\n        kulam: \"Mudaliar\",\n        natchathiram: \"Ashwini\",\n        occupation: \"Tamil Language Teacher\",\n        aboutMe: \"Dedicated to preserving Tamil language and culture. Teaching Tamil to kids in diaspora.\",\n        location: \"Sydney, Australia\",\n        phoneNumber: \"+61-2-555-0105\",\n        profileVisibility: \"public\" as const,\n        isVerified: true,\n      }\n    ];\n\n    // Create sample users\n    for (const user of sampleUsers) {\n      await storage.upsertUser(user);\n    }\n\n    // Sample posts showcasing community activity\n    const samplePosts = [\n      {\n        authorId: \"sample-user-1\",\n        content: \"🎉 Just organized a successful Bharatanatyam workshop for our kids here in SF! Amazing to see 25+ children learning our beautiful art form. Next workshop will be on classical music. Who's interested? #TamilCulture #BharatanatyamSF\",\n        postType: \"text\" as const,\n      },\n      {\n        authorId: \"sample-user-2\", \n        content: \"Our restaurant is sponsoring free meals for students during exam season! If you know any Tamil students in Toronto area who need support, please DM me. Community first! 🍛❤️ #CommunitySupport #TorontoTamils\",\n        postType: \"text\" as const,\n      },\n      {\n        authorId: \"sample-user-3\",\n        content: \"Medical camp update: Successfully provided free health checkups to 150+ community members last weekend. Special thanks to Dr. Suresh and nurse Kamala for volunteering! Next camp planned for December. #HealthForAll #CommunityService\",\n        postType: \"text\" as const,\n      },\n      {\n        authorId: \"sample-user-4\",\n        content: \"Excited to share our AI project is being used to translate ancient Tamil texts! Technology meeting tradition 🤖📜 Looking for Tamil literature experts to collaborate. Please reach out! #TamilTech #ArtificialIntelligence\",\n        postType: \"text\" as const,\n      },\n      {\n        authorId: \"sample-user-5\",\n        content: \"Registration now open for online Tamil classes for children (ages 5-15)! Interactive sessions every Saturday. Building the next generation of Tamil speakers globally 🌍 Link in comments #TamilEducation #OnlineLearning\",\n        postType: \"text\" as const,\n      },\n      {\n        authorId: \"sample-user-1\",\n        content: \"Beautiful Diwali celebration at our local temple! The rangoli competition was fierce 😄 Congratulations to all winners. Festival unites us no matter how far from home we are ✨ #Diwali2024 #TamilFestival\",\n        postType: \"text\" as const,\n      }\n    ];\n\n    // Create sample posts\n    for (const post of samplePosts) {\n      await storage.createPost(post);\n    }\n\n    // Sample events\n    const sampleEvents = [\n      {\n        organizerId: \"sample-user-1\",\n        title: \"Tamil New Year Celebration 2024\",\n        description: \"Join us for a grand Tamil New Year celebration with traditional food, music, and cultural performances. Families welcome! Free entry for children under 12.\",\n        location: \"San Francisco Community Center, 1234 Mission St\",\n        startDate: new Date(\"2024-04-14T10:00:00Z\"),\n        endDate: new Date(\"2024-04-14T16:00:00Z\"),\n        maxAttendees: 200,\n        currentAttendees: 85,\n        isPublic: true,\n        ticketPrice: 2500, // $25 in cents\n        status: \"upcoming\" as const,\n      },\n      {\n        organizerId: \"sample-user-2\", \n        title: \"Entrepreneurs Meet & Greet\",\n        description: \"Monthly networking event for Tamil entrepreneurs and business owners. Share experiences, find partners, and grow together. Light refreshments provided.\",\n        location: \"Toronto Business Hub, 567 King St W\",\n        startDate: new Date(\"2024-02-20T18:00:00Z\"),\n        endDate: new Date(\"2024-02-20T21:00:00Z\"),\n        maxAttendees: 50,\n        currentAttendees: 32,\n        isPublic: true,\n        ticketPrice: 0,\n        status: \"upcoming\" as const,\n      },\n      {\n        organizerId: \"sample-user-3\",\n        title: \"Free Health Screening Camp\",\n        description: \"Comprehensive health checkup including blood pressure, diabetes screening, and general consultation. Volunteer doctors and nurses from our community.\",\n        location: \"London Tamil Association, 89 High St\",\n        startDate: new Date(\"2024-03-10T09:00:00Z\"),\n        endDate: new Date(\"2024-03-10T15:00:00Z\"),\n        maxAttendees: 100,\n        currentAttendees: 67,\n        isPublic: true,\n        ticketPrice: 0,\n        status: \"upcoming\" as const,\n      },\n      {\n        organizerId: \"sample-user-5\",\n        title: \"Tamil Literature Book Club\",\n        description: \"Monthly discussion of classic and contemporary Tamil literature. This month: 'Ponniyin Selvan' by Kalki. Open to all Tamil literature enthusiasts.\",\n        location: \"Online via Zoom\",\n        startDate: new Date(\"2024-02-25T19:00:00Z\"),\n        endDate: new Date(\"2024-02-25T21:00:00Z\"),\n        maxAttendees: 30,\n        currentAttendees: 18,\n        isPublic: true,\n        ticketPrice: 0,\n        status: \"upcoming\" as const,\n      }\n    ];\n\n    // Create sample events\n    for (const event of sampleEvents) {\n      await storage.createEvent(event);\n    }\n\n    // Sample help requests\n    const sampleHelpRequests = [\n      {\n        requesterId: \"sample-user-3\",\n        title: \"Blood Donation Urgent - O+ Needed\",\n        description: \"Community member's father needs urgent blood transfusion. O+ blood type required at Toronto General Hospital. Please contact immediately if you can help.\",\n        type: \"medical\" as const,\n        location: \"Toronto, ON, Canada\",\n        urgencyLevel: 5,\n        status: \"active\" as const,\n      },\n      {\n        requesterId: \"sample-user-4\",\n        title: \"Airport Pickup Help in London\",\n        description: \"Elderly couple arriving at Heathrow tomorrow (Feb 15) at 2 PM. Their son got delayed due to work emergency. Can someone help with pickup and drop at hotel?\",\n        type: \"travel\" as const,\n        location: \"London Heathrow Airport\",\n        urgencyLevel: 3,\n        status: \"active\" as const,\n      },\n      {\n        requesterId: \"sample-user-1\",\n        title: \"Temporary Housing for Student\",\n        description: \"Tamil student from Chennai coming for 3-month internship in SF. Looking for temporary accommodation or host family. Clean, respectful, and willing to help with household work.\",\n        type: \"other\" as const,\n        location: \"San Francisco Bay Area\",\n        urgencyLevel: 2,\n        status: \"active\" as const,\n      }\n    ];\n\n    // Create sample help requests\n    for (const helpRequest of sampleHelpRequests) {\n      await storage.createHelpRequest(helpRequest);\n    }\n\n    // Sample matrimony profiles (V2.0 feature)\n    const sampleMatrimonyProfiles = [\n      {\n        userId: \"sample-user-1\",\n        age: 28,\n        height: \"5'6\\\"\",\n        education: \"Master's in Computer Science\",\n        interests: [\"Classical Dance\", \"Cooking\", \"Travel\", \"Photography\"],\n        lookingFor: \"Looking for someone who values family traditions and has career ambitions. Preference for someone from Tamil background who can appreciate our culture.\",\n        isActive: true,\n      },\n      {\n        userId: \"sample-user-4\",\n        age: 31,\n        height: \"5'10\\\"\",\n        education: \"PhD in Artificial Intelligence\",\n        interests: [\"Technology\", \"Chess\", \"Classical Music\", \"Cricket\"],\n        lookingFor: \"Seeking a life partner who is educated, independent, and shares similar values. Open to long-distance initially with plans to settle together.\",\n        isActive: true,\n      }\n    ];\n\n    // Create sample matrimony profiles\n    for (const profile of sampleMatrimonyProfiles) {\n      await storage.createMatrimonyProfile(profile);\n    }\n\n    // Sample jobs (V2.0 feature)\n    const sampleJobs = [\n      {\n        title: \"Senior Software Engineer - Tamil Fintech\",\n        company: \"TamilPay Inc\",\n        companyLogo: \"https://images.unsplash.com/photo-1616077064133-2583af65fc77?w=100&h=100&fit=crop\",\n        description: \"Join our mission to build financial tools for Tamil diaspora. Work on mobile payments, remittances, and digital banking. Tamil language skills preferred but not required.\",\n        location: \"Remote (Global)\",\n        type: \"full-time\",\n        experienceLevel: \"senior\",\n        salaryRange: \"$120,000 - $160,000\",\n        skills: [\"React\", \"Node.js\", \"Python\", \"AWS\", \"Tamil Language\"],\n        benefits: [\"Health Insurance\", \"Remote Work\", \"Tamil Cultural Time Off\", \"Professional Development\"],\n        postedById: \"sample-user-2\",\n        applicationsCount: 12,\n        isUrgent: false,\n        isRemote: true,\n      },\n      {\n        title: \"Tamil Content Creator\",\n        company: \"Cultural Media House\",\n        description: \"Create engaging Tamil content for digital platforms. Write scripts, manage social media, and help preserve our language in digital space.\",\n        location: \"Toronto, Canada\",\n        type: \"part-time\",\n        experienceLevel: \"mid\",\n        salaryRange: \"CAD $40,000 - $55,000\",\n        skills: [\"Tamil Writing\", \"Content Creation\", \"Social Media\", \"Video Editing\"],\n        benefits: [\"Flexible Hours\", \"Creative Freedom\", \"Cultural Impact\"],\n        postedById: \"sample-user-5\",\n        applicationsCount: 8,\n        isUrgent: true,\n        isRemote: false,\n      },\n      {\n        title: \"Community Health Coordinator\",\n        company: \"Tamil Health Network\",\n        description: \"Coordinate health programs for Tamil community. Organize medical camps, health education sessions, and connect families with healthcare resources.\",\n        location: \"London, UK\",\n        type: \"full-time\",\n        experienceLevel: \"entry\",\n        salaryRange: \"£35,000 - £45,000\",\n        skills: [\"Healthcare Administration\", \"Community Outreach\", \"Tamil/English\", \"Event Planning\"],\n        benefits: [\"NHS Benefits\", \"Community Impact\", \"Professional Training\", \"Tamil Cultural Leave\"],\n        postedById: \"sample-user-3\",\n        applicationsCount: 15,\n        isUrgent: false,\n        isRemote: false,\n      }\n    ];\n\n    // Create sample jobs\n    for (const job of sampleJobs) {\n      await storage.createJob(job);\n    }\n\n    // Sample businesses (V2.0 feature)\n    const sampleBusinesses = [\n      {\n        ownerId: \"sample-user-2\",\n        businessName: \"Tamilnadu Authentic Kitchen\",\n        businessLogo: \"https://images.unsplash.com/photo-1514933651103-005eec06c04b?w=150&h=150&fit=crop\",\n        category: \"Food & Restaurant\",\n        description: \"Authentic Tamil cuisine restaurant chain serving traditional dishes from different regions of Tamil Nadu. Catering services available for events and celebrations.\",\n        location: \"Toronto, Canada (Multiple Locations)\",\n        website: \"https://tamilnadu-kitchen.com\",\n        phone: \"+1-416-555-FOOD\",\n        email: \"info@tamilnadu-kitchen.com\",\n        services: [\"Dine-in\", \"Takeout\", \"Catering\", \"Event Planning\", \"Cooking Classes\"],\n        yearEstablished: 2018,\n        employeeCount: \"25-50\",\n        rating: 4,\n        reviewsCount: 156,\n        isVerified: true,\n        isFeatured: true,\n        socialMedia: {\n          instagram: \"@tamilnadu_kitchen\",\n          facebook: \"TamilnaduKitchen\",\n          youtube: \"TamilnaduKitchenTV\"\n        },\n      },\n      {\n        ownerId: \"sample-user-1\",\n        businessName: \"Digital Solutions Tamil\",\n        businessLogo: \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=150&h=150&fit=crop\",\n        category: \"Technology\",\n        description: \"Custom software development with focus on Tamil language applications. Specializing in educational apps, business software, and cultural preservation technology.\",\n        location: \"San Francisco, CA\",\n        website: \"https://digitalsolutionstamil.com\",\n        phone: \"+1-415-555-TECH\",\n        email: \"hello@digitalsolutionstamil.com\",\n        services: [\"Web Development\", \"Mobile Apps\", \"Tamil Language Software\", \"E-learning Platforms\", \"Cultural Apps\"],\n        yearEstablished: 2020,\n        employeeCount: \"5-10\",\n        rating: 5,\n        reviewsCount: 23,\n        isVerified: true,\n        isFeatured: false,\n        socialMedia: {\n          linkedin: \"digital-solutions-tamil\",\n          github: \"digitalsolutionstamil\"\n        },\n      },\n      {\n        ownerId: \"sample-user-3\",\n        businessName: \"Tamil Health Consultancy\",\n        businessLogo: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=150&h=150&fit=crop\",\n        category: \"Healthcare\",\n        description: \"Healthcare consultancy specializing in community health programs, medical interpretation services, and health education for Tamil diaspora.\",\n        location: \"London, UK\",\n        website: \"https://tamilhealthconsultancy.co.uk\",\n        phone: \"+44-20-555-HEALTH\",\n        email: \"info@tamilhealthconsultancy.co.uk\",\n        services: [\"Health Consultancy\", \"Medical Interpretation\", \"Community Health Programs\", \"Health Education\", \"Elderly Care Coordination\"],\n        yearEstablished: 2019,\n        employeeCount: \"10-25\",\n        rating: 4,\n        reviewsCount: 67,\n        isVerified: true,\n        isFeatured: true,\n        socialMedia: {\n          linkedin: \"tamil-health-consultancy\",\n          facebook: \"TamilHealthUK\"\n        },\n      }\n    ];\n\n    // Create sample businesses\n    for (const business of sampleBusinesses) {\n      await storage.createBusiness(business);\n    }\n\n    console.log(\"✅ Sample data created successfully!\");\n    console.log(\"Created:\");\n    console.log(`- ${sampleUsers.length} users`);\n    console.log(`- ${samplePosts.length} posts`);\n    console.log(`- ${sampleEvents.length} events`);\n    console.log(`- ${sampleHelpRequests.length} help requests`);\n    console.log(`- ${sampleMatrimonyProfiles.length} matrimony profiles`);\n    console.log(`- ${sampleJobs.length} jobs`);\n    console.log(`- ${sampleBusinesses.length} businesses`);\n\n  } catch (error) {\n    console.error(\"Error creating sample data:\", error);\n    throw error;\n  }\n}","size_bytes":17483},"server/storage.ts":{"content":"import {\n  users,\n  posts,\n  connections,\n  events,\n  eventRsvps,\n  helpRequests,\n  helpResponses,\n  messages,\n  postLikes,\n  postComments,\n  matrimonyProfiles,\n  jobs,\n  businesses,\n  jobApplications,\n  matrimonyInterests,\n  type User,\n  type UpsertUser,\n  type Post,\n  type InsertPost,\n  type Connection,\n  type InsertConnection,\n  type Event,\n  type InsertEvent,\n  type HelpRequest,\n  type InsertHelpRequest,\n  type Message,\n  type InsertMessage,\n  type MatrimonyProfile,\n  type InsertMatrimonyProfile,\n  type Job,\n  type InsertJob,\n  type Business,\n  type InsertBusiness,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, like, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // User profile operations\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  searchUsers(query: string, limit?: number): Promise<User[]>;\n  \n  // Posts operations\n  createPost(post: InsertPost): Promise<Post>;\n  getPosts(limit?: number, offset?: number): Promise<Post[]>;\n  getUserPosts(userId: string, limit?: number): Promise<Post[]>;\n  likePost(postId: string, userId: string): Promise<void>;\n  unlikePost(postId: string, userId: string): Promise<void>;\n  deletePost(postId: string, userId: string): Promise<void>;\n  \n  // Connections operations\n  sendConnectionRequest(requesterId: string, receiverId: string): Promise<Connection>;\n  acceptConnectionRequest(connectionId: string): Promise<Connection>;\n  rejectConnectionRequest(connectionId: string): Promise<Connection>;\n  getUserConnections(userId: string): Promise<Connection[]>;\n  getPendingConnectionRequests(userId: string): Promise<Connection[]>;\n  \n  // Events operations\n  createEvent(event: InsertEvent): Promise<Event>;\n  getEvents(limit?: number): Promise<Event[]>;\n  getUserEvents(userId: string): Promise<Event[]>;\n  rsvpToEvent(eventId: string, userId: string, status: string): Promise<void>;\n  \n  // Help requests operations\n  createHelpRequest(helpRequest: InsertHelpRequest): Promise<HelpRequest>;\n  getActiveHelpRequests(): Promise<HelpRequest[]>;\n  getUserHelpRequests(userId: string): Promise<HelpRequest[]>;\n  respondToHelpRequest(helpRequestId: string, responderId: string, message: string): Promise<void>;\n  \n  // Messages operations\n  sendMessage(message: InsertMessage): Promise<Message>;\n  getUserMessages(userId: string, otherUserId: string): Promise<Message[]>;\n  markMessageAsRead(messageId: string): Promise<void>;\n  \n  // Version 2.0 - Matrimony operations\n  getMatrimonyProfiles(): Promise<MatrimonyProfile[]>;\n  getMatrimonyProfile(userId: string): Promise<MatrimonyProfile | undefined>;\n  createMatrimonyProfile(profile: InsertMatrimonyProfile): Promise<MatrimonyProfile>;\n  expressMatrimonyInterest(fromUserId: string, toUserId: string, message: string): Promise<void>;\n  \n  // Version 2.0 - Jobs operations\n  getJobs(): Promise<Job[]>;\n  createJob(job: InsertJob): Promise<Job>;\n  applyToJob(jobId: string, applicantId: string, coverLetter: string): Promise<void>;\n  getUserJobApplications(userId: string): Promise<any[]>;\n  \n  // Version 2.0 - Business operations\n  getBusinesses(): Promise<Business[]>;\n  getBusinessCategories(): Promise<string[]>;\n  createBusiness(business: InsertBusiness): Promise<Business>;\n  contactBusiness(businessId: string, userId: string, message: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async searchUsers(query: string, limit: number = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(\n        or(\n          like(users.firstName, `%${query}%`),\n          like(users.lastName, `%${query}%`),\n          like(users.location, `%${query}%`),\n          like(users.occupation, `%${query}%`),\n          like(users.nativePlace, `%${query}%`)\n        )\n      )\n      .limit(limit);\n  }\n\n  // Posts operations\n  async createPost(post: InsertPost): Promise<Post> {\n    const [newPost] = await db.insert(posts).values(post).returning();\n    return newPost;\n  }\n\n  async getPosts(limit: number = 10, offset: number = 0): Promise<Post[]> {\n    return await db\n      .select({\n        id: posts.id,\n        authorId: posts.authorId,\n        content: posts.content,\n        postType: posts.postType,\n        mediaUrl: posts.mediaUrl,\n        likesCount: posts.likesCount,\n        commentsCount: posts.commentsCount,\n        createdAt: posts.createdAt,\n        updatedAt: posts.updatedAt,\n        author: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(posts)\n      .leftJoin(users, eq(posts.authorId, users.id))\n      .orderBy(desc(posts.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getUserPosts(userId: string, limit: number = 10): Promise<Post[]> {\n    return await db\n      .select()\n      .from(posts)\n      .where(eq(posts.authorId, userId))\n      .orderBy(desc(posts.createdAt))\n      .limit(limit);\n  }\n\n  async likePost(postId: string, userId: string): Promise<void> {\n    await db.insert(postLikes).values({ postId, userId });\n    await db\n      .update(posts)\n      .set({ likesCount: sql`${posts.likesCount} + 1` })\n      .where(eq(posts.id, postId));\n  }\n\n  async unlikePost(postId: string, userId: string): Promise<void> {\n    await db\n      .delete(postLikes)\n      .where(and(eq(postLikes.postId, postId), eq(postLikes.userId, userId)));\n    await db\n      .update(posts)\n      .set({ likesCount: sql`${posts.likesCount} - 1` })\n      .where(eq(posts.id, postId));\n  }\n\n  async deletePost(postId: string, userId: string): Promise<void> {\n    await db\n      .delete(posts)\n      .where(and(eq(posts.id, postId), eq(posts.authorId, userId)));\n  }\n\n  // Connections operations\n  async sendConnectionRequest(requesterId: string, receiverId: string): Promise<Connection> {\n    const [connection] = await db\n      .insert(connections)\n      .values({ requesterId, receiverId })\n      .returning();\n    return connection;\n  }\n\n  async acceptConnectionRequest(connectionId: string): Promise<Connection> {\n    const [connection] = await db\n      .update(connections)\n      .set({ status: 'accepted', updatedAt: new Date() })\n      .where(eq(connections.id, connectionId))\n      .returning();\n    return connection;\n  }\n\n  async rejectConnectionRequest(connectionId: string): Promise<Connection> {\n    const [connection] = await db\n      .update(connections)\n      .set({ status: 'rejected', updatedAt: new Date() })\n      .where(eq(connections.id, connectionId))\n      .returning();\n    return connection;\n  }\n\n  async getUserConnections(userId: string): Promise<Connection[]> {\n    return await db\n      .select({\n        id: connections.id,\n        requesterId: connections.requesterId,\n        receiverId: connections.receiverId,\n        status: connections.status,\n        createdAt: connections.createdAt,\n        updatedAt: connections.updatedAt,\n        requester: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(connections)\n      .leftJoin(users, eq(connections.requesterId, users.id))\n      .where(\n        and(\n          or(eq(connections.requesterId, userId), eq(connections.receiverId, userId)),\n          eq(connections.status, 'accepted')\n        )\n      );\n  }\n\n  async getPendingConnectionRequests(userId: string): Promise<Connection[]> {\n    return await db\n      .select({\n        id: connections.id,\n        requesterId: connections.requesterId,\n        receiverId: connections.receiverId,\n        status: connections.status,\n        createdAt: connections.createdAt,\n        updatedAt: connections.updatedAt,\n        requester: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(connections)\n      .leftJoin(users, eq(connections.requesterId, users.id))\n      .where(\n        and(\n          eq(connections.receiverId, userId),\n          eq(connections.status, 'pending')\n        )\n      );\n  }\n\n  // Events operations\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async getEvents(limit: number = 10): Promise<Event[]> {\n    return await db\n      .select({\n        id: events.id,\n        organizerId: events.organizerId,\n        title: events.title,\n        description: events.description,\n        location: events.location,\n        startDate: events.startDate,\n        endDate: events.endDate,\n        maxAttendees: events.maxAttendees,\n        currentAttendees: events.currentAttendees,\n        isPublic: events.isPublic,\n        ticketPrice: events.ticketPrice,\n        status: events.status,\n        createdAt: events.createdAt,\n        updatedAt: events.updatedAt,\n        organizer: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(events)\n      .leftJoin(users, eq(events.organizerId, users.id))\n      .where(eq(events.isPublic, true))\n      .orderBy(events.startDate)\n      .limit(limit);\n  }\n\n  async getUserEvents(userId: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.organizerId, userId))\n      .orderBy(events.startDate);\n  }\n\n  async rsvpToEvent(eventId: string, userId: string, status: string): Promise<void> {\n    await db\n      .insert(eventRsvps)\n      .values({ eventId, userId, status })\n      .onConflictDoUpdate({\n        target: [eventRsvps.eventId, eventRsvps.userId],\n        set: { status }\n      });\n\n    // Update current attendees count\n    const attendeesCount = await db\n      .select({ count: count() })\n      .from(eventRsvps)\n      .where(\n        and(\n          eq(eventRsvps.eventId, eventId),\n          eq(eventRsvps.status, 'attending')\n        )\n      );\n\n    await db\n      .update(events)\n      .set({ currentAttendees: attendeesCount[0].count })\n      .where(eq(events.id, eventId));\n  }\n\n  // Help requests operations\n  async createHelpRequest(helpRequest: InsertHelpRequest): Promise<HelpRequest> {\n    const [newHelpRequest] = await db.insert(helpRequests).values(helpRequest).returning();\n    return newHelpRequest;\n  }\n\n  async getActiveHelpRequests(): Promise<HelpRequest[]> {\n    return await db\n      .select({\n        id: helpRequests.id,\n        requesterId: helpRequests.requesterId,\n        title: helpRequests.title,\n        description: helpRequests.description,\n        type: helpRequests.type,\n        location: helpRequests.location,\n        urgencyLevel: helpRequests.urgencyLevel,\n        status: helpRequests.status,\n        createdAt: helpRequests.createdAt,\n        updatedAt: helpRequests.updatedAt,\n        requester: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          location: users.location,\n        }\n      })\n      .from(helpRequests)\n      .leftJoin(users, eq(helpRequests.requesterId, users.id))\n      .where(eq(helpRequests.status, 'active'))\n      .orderBy(desc(helpRequests.urgencyLevel), desc(helpRequests.createdAt));\n  }\n\n  async getUserHelpRequests(userId: string): Promise<HelpRequest[]> {\n    return await db\n      .select()\n      .from(helpRequests)\n      .where(eq(helpRequests.requesterId, userId))\n      .orderBy(desc(helpRequests.createdAt));\n  }\n\n  async respondToHelpRequest(helpRequestId: string, responderId: string, message: string): Promise<void> {\n    await db.insert(helpResponses).values({\n      helpRequestId,\n      responderId,\n      message\n    });\n  }\n\n  // Messages operations\n  async sendMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    return newMessage;\n  }\n\n  async getUserMessages(userId: string, otherUserId: string): Promise<Message[]> {\n    return await db\n      .select({\n        id: messages.id,\n        senderId: messages.senderId,\n        receiverId: messages.receiverId,\n        content: messages.content,\n        isRead: messages.isRead,\n        createdAt: messages.createdAt,\n        sender: {\n          id: users.id,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(messages)\n      .leftJoin(users, eq(messages.senderId, users.id))\n      .where(\n        or(\n          and(eq(messages.senderId, userId), eq(messages.receiverId, otherUserId)),\n          and(eq(messages.senderId, otherUserId), eq(messages.receiverId, userId))\n        )\n      )\n      .orderBy(messages.createdAt);\n  }\n\n  async markMessageAsRead(messageId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, messageId));\n  }\n\n  // Version 2.0 - Matrimony operations\n  async getMatrimonyProfiles(): Promise<MatrimonyProfile[]> {\n    const profiles = await db\n      .select({\n        id: matrimonyProfiles.id,\n        userId: matrimonyProfiles.userId,\n        age: matrimonyProfiles.age,\n        height: matrimonyProfiles.height,\n        education: matrimonyProfiles.education,\n        interests: matrimonyProfiles.interests,\n        lookingFor: matrimonyProfiles.lookingFor,\n        isActive: matrimonyProfiles.isActive,\n        createdAt: matrimonyProfiles.createdAt,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        profileImageUrl: users.profileImageUrl,\n        location: users.location,\n        nativePlace: users.nativePlace,\n        kulam: users.kulam,\n        natchathiram: users.natchathiram,\n        occupation: users.occupation,\n      })\n      .from(matrimonyProfiles)\n      .innerJoin(users, eq(matrimonyProfiles.userId, users.id))\n      .where(eq(matrimonyProfiles.isActive, true));\n    \n    return profiles as any[];\n  }\n\n  async getMatrimonyProfile(userId: string): Promise<MatrimonyProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(matrimonyProfiles)\n      .where(eq(matrimonyProfiles.userId, userId));\n    return profile;\n  }\n\n  async createMatrimonyProfile(profile: InsertMatrimonyProfile): Promise<MatrimonyProfile> {\n    const [newProfile] = await db\n      .insert(matrimonyProfiles)\n      .values(profile)\n      .returning();\n    return newProfile;\n  }\n\n  async expressMatrimonyInterest(fromUserId: string, toUserId: string, message: string): Promise<void> {\n    await db.insert(matrimonyInterests).values({\n      fromUserId,\n      toUserId,\n      message,\n      status: 'pending',\n    });\n  }\n\n  // Version 2.0 - Jobs operations\n  async getJobs(): Promise<Job[]> {\n    const jobsList = await db\n      .select({\n        id: jobs.id,\n        title: jobs.title,\n        company: jobs.company,\n        companyLogo: jobs.companyLogo,\n        description: jobs.description,\n        location: jobs.location,\n        type: jobs.type,\n        experienceLevel: jobs.experienceLevel,\n        salaryRange: jobs.salaryRange,\n        skills: jobs.skills,\n        benefits: jobs.benefits,\n        postedById: jobs.postedById,\n        applicationsCount: jobs.applicationsCount,\n        isUrgent: jobs.isUrgent,\n        isRemote: jobs.isRemote,\n        createdAt: jobs.createdAt,\n        postedBy: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(jobs)\n      .innerJoin(users, eq(jobs.postedById, users.id))\n      .orderBy(desc(jobs.createdAt));\n    \n    return jobsList as any[];\n  }\n\n  async createJob(job: InsertJob): Promise<Job> {\n    const [newJob] = await db\n      .insert(jobs)\n      .values(job)\n      .returning();\n    return newJob;\n  }\n\n  async applyToJob(jobId: string, applicantId: string, coverLetter: string): Promise<void> {\n    await db.insert(jobApplications).values({\n      jobId,\n      applicantId,\n      coverLetter,\n      status: 'pending',\n    });\n\n    // Increment applications count\n    await db\n      .update(jobs)\n      .set({ \n        applicationsCount: sql`${jobs.applicationsCount} + 1`\n      })\n      .where(eq(jobs.id, jobId));\n  }\n\n  async getUserJobApplications(userId: string): Promise<any[]> {\n    const applications = await db\n      .select()\n      .from(jobApplications)\n      .where(eq(jobApplications.applicantId, userId))\n      .orderBy(desc(jobApplications.createdAt));\n    \n    return applications;\n  }\n\n  // Version 2.0 - Business operations\n  async getBusinesses(): Promise<Business[]> {\n    const businessList = await db\n      .select({\n        id: businesses.id,\n        ownerId: businesses.ownerId,\n        businessName: businesses.businessName,\n        businessLogo: businesses.businessLogo,\n        category: businesses.category,\n        description: businesses.description,\n        location: businesses.location,\n        website: businesses.website,\n        phone: businesses.phone,\n        email: businesses.email,\n        services: businesses.services,\n        yearEstablished: businesses.yearEstablished,\n        employeeCount: businesses.employeeCount,\n        rating: businesses.rating,\n        reviewsCount: businesses.reviewsCount,\n        isVerified: businesses.isVerified,\n        isFeatured: businesses.isFeatured,\n        socialMedia: businesses.socialMedia,\n        createdAt: businesses.createdAt,\n        owner: {\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n        }\n      })\n      .from(businesses)\n      .innerJoin(users, eq(businesses.ownerId, users.id))\n      .orderBy(desc(businesses.isFeatured), desc(businesses.createdAt));\n    \n    return businessList as any[];\n  }\n\n  async getBusinessCategories(): Promise<string[]> {\n    const categories = await db\n      .selectDistinct({ category: businesses.category })\n      .from(businesses);\n    \n    return categories.map(c => c.category).filter(Boolean);\n  }\n\n  async createBusiness(business: InsertBusiness): Promise<Business> {\n    const [newBusiness] = await db\n      .insert(businesses)\n      .values(business)\n      .returning();\n    return newBusiness;\n  }\n\n  async contactBusiness(businessId: string, userId: string, message: string): Promise<void> {\n    // For now, we'll create a message entry. In a real app, this might send an email or notification\n    const business = await db\n      .select({ ownerId: businesses.ownerId })\n      .from(businesses)\n      .where(eq(businesses.id, businessId))\n      .limit(1);\n    \n    if (business[0]) {\n      await db.insert(messages).values({\n        senderId: userId,\n        receiverId: business[0].ownerId,\n        content: `Business Contact Request: ${message}`,\n      });\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":19874},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['individual', 'business', 'organization']);\nexport const userTypeEnum = pgEnum('user_type', ['member', 'moderator', 'admin']);\nexport const privacySettingEnum = pgEnum('privacy_setting', ['public', 'friends', 'private']);\nexport const postTypeEnum = pgEnum('post_type', ['text', 'image', 'video']);\nexport const connectionStatusEnum = pgEnum('connection_status', ['pending', 'accepted', 'rejected']);\nexport const helpRequestStatusEnum = pgEnum('help_request_status', ['active', 'resolved', 'closed']);\nexport const helpRequestTypeEnum = pgEnum('help_request_type', ['medical', 'travel', 'safety', 'other']);\nexport const eventStatusEnum = pgEnum('event_status', ['upcoming', 'ongoing', 'completed', 'cancelled']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('individual').notNull(),\n  userType: userTypeEnum(\"user_type\").default('member').notNull(),\n  \n  // Community-specific fields\n  nativePlace: varchar(\"native_place\"),\n  kulam: varchar(\"kulam\"),\n  natchathiram: varchar(\"natchathiram\"),\n  occupation: varchar(\"occupation\"),\n  aboutMe: text(\"about_me\"),\n  location: varchar(\"location\"),\n  phoneNumber: varchar(\"phone_number\"),\n  \n  // Privacy settings\n  profileVisibility: privacySettingEnum(\"profile_visibility\").default('public').notNull(),\n  \n  // Verification\n  isVerified: boolean(\"is_verified\").default(false),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Posts table\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  postType: postTypeEnum(\"post_type\").default('text').notNull(),\n  mediaUrl: varchar(\"media_url\"),\n  likesCount: integer(\"likes_count\").default(0),\n  commentsCount: integer(\"comments_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Post likes table\nexport const postLikes = pgTable(\"post_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => posts.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Post comments table\nexport const postComments = pgTable(\"post_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  postId: varchar(\"post_id\").references(() => posts.id).notNull(),\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Connections table\nexport const connections = pgTable(\"connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requesterId: varchar(\"requester_id\").references(() => users.id).notNull(),\n  receiverId: varchar(\"receiver_id\").references(() => users.id).notNull(),\n  status: connectionStatusEnum(\"status\").default('pending').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizerId: varchar(\"organizer_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  location: varchar(\"location\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  maxAttendees: integer(\"max_attendees\"),\n  currentAttendees: integer(\"current_attendees\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  ticketPrice: integer(\"ticket_price\").default(0), // in cents\n  status: eventStatusEnum(\"status\").default('upcoming').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Event RSVPs table\nexport const eventRsvps = pgTable(\"event_rsvps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").references(() => events.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\").default('attending').notNull(), // attending, not_attending, maybe\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Help requests table\nexport const helpRequests = pgTable(\"help_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requesterId: varchar(\"requester_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: helpRequestTypeEnum(\"type\").notNull(),\n  location: varchar(\"location\"),\n  urgencyLevel: integer(\"urgency_level\").default(1), // 1-5 scale\n  status: helpRequestStatusEnum(\"status\").default('active').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Help responses table\nexport const helpResponses = pgTable(\"help_responses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  helpRequestId: varchar(\"help_request_id\").references(() => helpRequests.id).notNull(),\n  responderId: varchar(\"responder_id\").references(() => users.id).notNull(),\n  message: text(\"message\"),\n  isAccepted: boolean(\"is_accepted\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  receiverId: varchar(\"receiver_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  posts: many(posts),\n  postLikes: many(postLikes),\n  postComments: many(postComments),\n  sentConnections: many(connections, { relationName: \"requester\" }),\n  receivedConnections: many(connections, { relationName: \"receiver\" }),\n  organizedEvents: many(events),\n  eventRsvps: many(eventRsvps),\n  helpRequests: many(helpRequests),\n  helpResponses: many(helpResponses),\n  sentMessages: many(messages, { relationName: \"sender\" }),\n  receivedMessages: many(messages, { relationName: \"receiver\" }),\n}));\n\nexport const postsRelations = relations(posts, ({ one, many }) => ({\n  author: one(users, {\n    fields: [posts.authorId],\n    references: [users.id],\n  }),\n  likes: many(postLikes),\n  comments: many(postComments),\n}));\n\nexport const postLikesRelations = relations(postLikes, ({ one }) => ({\n  post: one(posts, {\n    fields: [postLikes.postId],\n    references: [posts.id],\n  }),\n  user: one(users, {\n    fields: [postLikes.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const postCommentsRelations = relations(postComments, ({ one }) => ({\n  post: one(posts, {\n    fields: [postComments.postId],\n    references: [posts.id],\n  }),\n  author: one(users, {\n    fields: [postComments.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const connectionsRelations = relations(connections, ({ one }) => ({\n  requester: one(users, {\n    fields: [connections.requesterId],\n    references: [users.id],\n    relationName: \"requester\",\n  }),\n  receiver: one(users, {\n    fields: [connections.receiverId],\n    references: [users.id],\n    relationName: \"receiver\",\n  }),\n}));\n\nexport const eventsRelations = relations(events, ({ one, many }) => ({\n  organizer: one(users, {\n    fields: [events.organizerId],\n    references: [users.id],\n  }),\n  rsvps: many(eventRsvps),\n}));\n\nexport const eventRsvpsRelations = relations(eventRsvps, ({ one }) => ({\n  event: one(events, {\n    fields: [eventRsvps.eventId],\n    references: [events.id],\n  }),\n  user: one(users, {\n    fields: [eventRsvps.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const helpRequestsRelations = relations(helpRequests, ({ one, many }) => ({\n  requester: one(users, {\n    fields: [helpRequests.requesterId],\n    references: [users.id],\n  }),\n  responses: many(helpResponses),\n}));\n\nexport const helpResponsesRelations = relations(helpResponses, ({ one }) => ({\n  helpRequest: one(helpRequests, {\n    fields: [helpResponses.helpRequestId],\n    references: [helpRequests.id],\n  }),\n  responder: one(users, {\n    fields: [helpResponses.responderId],\n    references: [users.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  receiver: one(users, {\n    fields: [messages.receiverId],\n    references: [users.id],\n    relationName: \"receiver\",\n  }),\n}));\n\n// Version 2.0 Tables\nexport const matrimonyProfiles = pgTable(\"matrimony_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  age: integer(\"age\").notNull(),\n  height: varchar(\"height\"),\n  education: varchar(\"education\"),\n  interests: varchar(\"interests\").array(),\n  lookingFor: text(\"looking_for\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const jobs = pgTable(\"jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  company: varchar(\"company\").notNull(),\n  companyLogo: varchar(\"company_logo\"),\n  description: text(\"description\").notNull(),\n  location: varchar(\"location\").notNull(),\n  type: varchar(\"type\").notNull(), // full-time, part-time, contract, remote\n  experienceLevel: varchar(\"experience_level\").notNull(), // entry, mid, senior, executive\n  salaryRange: varchar(\"salary_range\"),\n  skills: varchar(\"skills\").array(),\n  benefits: varchar(\"benefits\").array(),\n  postedById: varchar(\"posted_by_id\").references(() => users.id).notNull(),\n  applicationsCount: integer(\"applications_count\").default(0),\n  isUrgent: boolean(\"is_urgent\").default(false),\n  isRemote: boolean(\"is_remote\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const jobApplications = pgTable(\"job_applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: varchar(\"job_id\").references(() => jobs.id).notNull(),\n  applicantId: varchar(\"applicant_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\").default('pending').notNull(), // pending, reviewed, accepted, rejected\n  coverLetter: text(\"cover_letter\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const businesses = pgTable(\"businesses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\").references(() => users.id).notNull(),\n  businessName: varchar(\"business_name\").notNull(),\n  businessLogo: varchar(\"business_logo\"),\n  category: varchar(\"category\").notNull(),\n  description: text(\"description\").notNull(),\n  location: varchar(\"location\").notNull(),\n  website: varchar(\"website\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  services: varchar(\"services\").array(),\n  yearEstablished: integer(\"year_established\"),\n  employeeCount: varchar(\"employee_count\"),\n  rating: integer(\"rating\").default(0),\n  reviewsCount: integer(\"reviews_count\").default(0),\n  isVerified: boolean(\"is_verified\").default(false),\n  isFeatured: boolean(\"is_featured\").default(false),\n  socialMedia: jsonb(\"social_media\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const matrimonyInterests = pgTable(\"matrimony_interests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromUserId: varchar(\"from_user_id\").references(() => users.id).notNull(),\n  toUserId: varchar(\"to_user_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\").default('pending').notNull(), // pending, accepted, rejected\n  message: text(\"message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  likesCount: true,\n  commentsCount: true,\n});\n\nexport const insertConnectionSchema = createInsertSchema(connections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  currentAttendees: true,\n});\n\nexport const insertHelpRequestSchema = createInsertSchema(helpRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMatrimonyProfileSchema = createInsertSchema(matrimonyProfiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  applicationsCount: true,\n});\n\nexport const insertBusinessSchema = createInsertSchema(businesses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  rating: true,\n  reviewsCount: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Post = typeof posts.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Connection = typeof connections.$inferSelect;\nexport type InsertConnection = z.infer<typeof insertConnectionSchema>;\nexport type Event = typeof events.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type HelpRequest = typeof helpRequests.$inferSelect;\nexport type InsertHelpRequest = z.infer<typeof insertHelpRequestSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type MatrimonyProfile = typeof matrimonyProfiles.$inferSelect;\nexport type InsertMatrimonyProfile = z.infer<typeof insertMatrimonyProfileSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Business = typeof businesses.$inferSelect;\nexport type InsertBusiness = z.infer<typeof insertBusinessSchema>;\n","size_bytes":15372},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Profile from \"@/pages/profile\";\nimport Members from \"@/pages/members\";\nimport Events from \"@/pages/events\";\nimport HelpDesk from \"@/pages/help-desk\";\nimport Matrimony from \"@/pages/matrimony\";\nimport Jobs from \"@/pages/jobs\";\nimport BusinessHub from \"@/pages/business-hub\";\nimport VersionSelector from \"@/pages/version-selector\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect, useState } from \"react\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [currentVersion, setCurrentVersion] = useState<string>('v1');\n\n  useEffect(() => {\n    const version = localStorage.getItem('digital-house-version') || 'v1';\n    setCurrentVersion(version);\n  }, []);\n\n  if (isLoading) {\n    return <div className=\"min-h-screen flex items-center justify-center\">Loading...</div>;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/version-selector\" component={VersionSelector} />\n      {!isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/members\" component={Members} />\n          <Route path=\"/events\" component={Events} />\n          <Route path=\"/help-desk\" component={HelpDesk} />\n          \n          {/* Version 2.0 Features - Always available but show different content based on version */}\n          <Route path=\"/matrimony\" component={Matrimony} />\n          <Route path=\"/jobs\" component={Jobs} />\n          <Route path=\"/business\" component={BusinessHub} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2241},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(42.0290 92.8251% 56.2745%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(260.4 89.2% 70.4%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(217.2 91.2% 59.8%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Digital House custom colors */\n  --primary-50: hsl(214 100% 97%);\n  --primary-500: hsl(217.2 91.2% 59.8%);\n  --primary-600: hsl(221.2 83.2% 53.3%);\n  --primary-700: hsl(224.3 76.3% 48%);\n  --primary-900: hsl(224 71.4% 4.1%);\n  \n  --secondary-500: hsl(42.0290 92.8251% 56.2745%);\n  --secondary-600: hsl(32 95% 44%);\n  \n  --accent-500: hsl(260.4 89.2% 70.4%);\n  --accent-600: hsl(258.3 89.5% 66.3%);\n  \n  --emergency-500: hsl(0 84.2% 60.2%);\n  --emergency-600: hsl(0 72.2% 50.6%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(42.0290 92.8251% 56.2745%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(260.4 89.2% 70.4%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(217.2 91.2% 59.8%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Digital House utility classes */\n.gradient-primary {\n  @apply bg-gradient-to-r from-blue-500 to-purple-500;\n}\n\n.gradient-secondary {\n  @apply bg-gradient-to-r from-orange-500 to-yellow-500;\n}\n\n.text-gradient {\n  @apply text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-purple-500;\n}\n\n.card-hover {\n  @apply hover:shadow-lg transition-all duration-300 hover:scale-[1.02];\n}\n\n.btn-emergency {\n  @apply bg-red-500 hover:bg-red-600 text-white font-medium transition-colors;\n}\n","size_bytes":5743},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/emergency-button.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Phone, Zap } from \"lucide-react\";\n\nexport default function EmergencyButton() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isEmergencyDialogOpen, setIsEmergencyDialogOpen] = useState(false);\n  const [emergencyRequest, setEmergencyRequest] = useState({\n    title: \"\",\n    description: \"\",\n    type: \"medical\" as const,\n    location: \"\",\n    urgencyLevel: 4 // Emergency requests default to high urgency\n  });\n\n  // Create emergency help request mutation\n  const createEmergencyMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/help-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/help-requests\"] });\n      setIsEmergencyDialogOpen(false);\n      setEmergencyRequest({\n        title: \"\",\n        description: \"\",\n        type: \"medical\",\n        location: \"\",\n        urgencyLevel: 4\n      });\n      toast({\n        title: \"Emergency Request Sent!\",\n        description: \"Community members nearby will be notified immediately.\",\n        variant: \"default\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send emergency request. Please try calling emergency services.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEmergencyRequest = () => {\n    if (!emergencyRequest.title.trim() || !emergencyRequest.description.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide emergency details.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createEmergencyMutation.mutate(emergencyRequest);\n  };\n\n  const emergencyContacts = [\n    { label: \"Police\", number: \"100\", icon: \"🚓\" },\n    { label: \"Fire\", number: \"101\", icon: \"🚒\" },\n    { label: \"Ambulance\", number: \"102\", icon: \"🚑\" },\n    { label: \"Emergency\", number: \"112\", icon: \"🆘\" },\n  ];\n\n  return (\n    <Dialog open={isEmergencyDialogOpen} onOpenChange={setIsEmergencyDialogOpen}>\n      <DialogTrigger asChild>\n        <Button \n          className=\"btn-emergency relative animate-pulse\"\n          data-testid=\"button-emergency\"\n        >\n          <AlertTriangle size={16} className=\"mr-2\" />\n          Help Request\n          <Zap size={12} className=\"absolute -top-1 -right-1 text-yellow-300\" />\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2 text-red-600\">\n            <AlertTriangle size={20} />\n            <span>Emergency Help Request</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        {/* Emergency Contacts Alert */}\n        <Alert className=\"border-red-200 bg-red-50 mb-4\">\n          <Phone className=\"h-4 w-4 text-red-500\" />\n          <AlertDescription>\n            <div className=\"mb-2 font-semibold text-red-800\">\n              For immediate life-threatening emergencies, call:\n            </div>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {emergencyContacts.map((contact) => (\n                <a\n                  key={contact.number}\n                  href={`tel:${contact.number}`}\n                  className=\"flex items-center space-x-2 p-2 bg-white rounded border border-red-200 hover:bg-red-50 transition-colors\"\n                >\n                  <span>{contact.icon}</span>\n                  <span className=\"font-medium\">{contact.label}</span>\n                  <span className=\"text-red-600 font-bold\">{contact.number}</span>\n                </a>\n              ))}\n            </div>\n          </AlertDescription>\n        </Alert>\n\n        <div className=\"space-y-4\">\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              This will send an immediate notification to nearby community volunteers. \n              Use this for non-life-threatening situations where you need community assistance.\n            </AlertDescription>\n          </Alert>\n\n          <div>\n            <Label htmlFor=\"emergencyTitle\">What kind of help do you need? *</Label>\n            <Input\n              id=\"emergencyTitle\"\n              value={emergencyRequest.title}\n              onChange={(e) => setEmergencyRequest(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"e.g., Need ride to hospital, Lost wallet, Car breakdown\"\n              className=\"border-red-300 focus:border-red-500\"\n              data-testid=\"input-emergency-title\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"emergencyDescription\">Describe your situation *</Label>\n            <Textarea\n              id=\"emergencyDescription\"\n              value={emergencyRequest.description}\n              onChange={(e) => setEmergencyRequest(prev => ({ ...prev, description: e.target.value }))}\n              placeholder=\"Please provide details about your current situation and what assistance you need...\"\n              className=\"min-h-[100px] border-red-300 focus:border-red-500\"\n              data-testid=\"textarea-emergency-description\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"emergencyType\">Type of Emergency</Label>\n              <Select\n                value={emergencyRequest.type}\n                onValueChange={(value: any) => setEmergencyRequest(prev => ({ ...prev, type: value }))}\n              >\n                <SelectTrigger className=\"border-red-300\" data-testid=\"select-emergency-type\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"medical\">Medical Emergency</SelectItem>\n                  <SelectItem value=\"travel\">Travel Emergency</SelectItem>\n                  <SelectItem value=\"safety\">Safety Concern</SelectItem>\n                  <SelectItem value=\"other\">Other Emergency</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"emergencyLocation\">Your Current Location</Label>\n              <Input\n                id=\"emergencyLocation\"\n                value={emergencyRequest.location}\n                onChange={(e) => setEmergencyRequest(prev => ({ ...prev, location: e.target.value }))}\n                placeholder={user?.location || \"Enter your location\"}\n                className=\"border-red-300 focus:border-red-500\"\n                data-testid=\"input-emergency-location\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center pt-4 border-t\">\n            <div className=\"text-sm text-gray-600\">\n              This will notify volunteers within 10km of your location\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsEmergencyDialogOpen(false)}\n                data-testid=\"button-cancel-emergency\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleEmergencyRequest}\n                disabled={createEmergencyMutation.isPending}\n                className=\"btn-emergency\"\n                data-testid=\"button-send-emergency\"\n              >\n                {createEmergencyMutation.isPending ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                ) : (\n                  <>\n                    <Zap size={16} className=\"mr-2\" />\n                    Send Help Request\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9003},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  Home, \n  Menu,\n  User,\n  Settings,\n  LogOut,\n  Bell\n} from \"lucide-react\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const currentVersion = localStorage.getItem('digital-house-version') || 'v1';\n  \n  const baseNavItems = [\n    { href: \"/\", label: \"Home\", icon: Home },\n    { href: \"/members\", label: \"Members\" },\n    { href: \"/events\", label: \"Events\" },\n    { href: \"/help-desk\", label: \"Help Desk\" },\n  ];\n\n  const v2NavItems = [\n    { href: \"/matrimony\", label: \"Matrimony\" },\n    { href: \"/jobs\", label: \"Jobs\" },\n    { href: \"/business\", label: \"Business Hub\" },\n  ];\n\n  const navItems = currentVersion === 'v2' ? [...baseNavItems, ...v2NavItems] : baseNavItems;\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-lg flex items-center justify-center\">\n              <Home className=\"text-white\" size={16} />\n            </div>\n            <span className=\"text-xl font-bold text-gray-900\">Digital House</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`text-sm font-medium transition-colors hover:text-primary-600 ${\n                    isActive ? 'text-primary-600' : 'text-gray-600'\n                  }`}\n                  data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n                >\n                  {item.label}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Notifications */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n              <Bell size={18} />\n              <span className=\"absolute -top-1 -right-1 h-4 w-4 bg-red-500 rounded-full text-xs text-white flex items-center justify-center\">\n                2\n              </span>\n            </Button>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={user?.profileImageUrl || \"\"} alt={`${user?.firstName} ${user?.lastName}`} />\n                    <AvatarFallback className=\"bg-primary-500 text-white text-sm\">\n                      {(user?.firstName?.[0] || \"\") + (user?.lastName?.[0] || \"\")}\n                    </AvatarFallback>\n                  </Avatar>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-56\" align=\"end\">\n                <div className=\"flex items-center justify-start gap-2 p-2\">\n                  <div className=\"flex flex-col space-y-1 leading-none\">\n                    <p className=\"font-medium text-sm\" data-testid=\"text-user-name\">\n                      {user?.firstName} {user?.lastName}\n                    </p>\n                    <p className=\"w-[200px] truncate text-xs text-muted-foreground\" data-testid=\"text-user-email\">\n                      {user?.email}\n                    </p>\n                  </div>\n                </div>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/profile\" className=\"cursor-pointer\" data-testid=\"menu-profile\">\n                    <User className=\"mr-2 h-4 w-4\" />\n                    Profile\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"menu-settings\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/version-selector\" className=\"cursor-pointer\" data-testid=\"menu-version\">\n                    <span className=\"mr-2 text-xs bg-gradient-to-r from-purple-500 to-blue-500 text-white px-1 py-0.5 rounded\">v{currentVersion.slice(1)}</span>\n                    Switch Version\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout} data-testid=\"menu-logout\">\n                  <LogOut className=\"mr-2 h-4 w-4\" />\n                  Log out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile Menu */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                  <Menu size={18} />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                <div className=\"flex flex-col h-full\">\n                  <div className=\"flex items-center space-x-2 pb-6\">\n                    <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-lg flex items-center justify-center\">\n                      <Home className=\"text-white\" size={16} />\n                    </div>\n                    <span className=\"text-xl font-bold text-gray-900\">Digital House</span>\n                  </div>\n                  \n                  <nav className=\"flex-1 space-y-2\">\n                    {navItems.map((item) => {\n                      const isActive = location === item.href;\n                      return (\n                        <Link\n                          key={item.href}\n                          href={item.href}\n                          onClick={() => setIsMobileMenuOpen(false)}\n                          className={`flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                            isActive \n                              ? 'bg-primary-50 text-primary-600 border border-primary-200' \n                              : 'text-gray-600 hover:bg-gray-100'\n                          }`}\n                          data-testid={`mobile-nav-${item.label.toLowerCase().replace(' ', '-')}`}\n                        >\n                          <span>{item.label}</span>\n                        </Link>\n                      );\n                    })}\n                  </nav>\n\n                  <div className=\"border-t pt-6 mt-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={user?.profileImageUrl || \"\"} />\n                        <AvatarFallback className=\"bg-primary-500 text-white\">\n                          {(user?.firstName?.[0] || \"\") + (user?.lastName?.[0] || \"\")}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium text-sm\">{user?.firstName} {user?.lastName}</p>\n                        <p className=\"text-xs text-gray-500 truncate\">{user?.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Link \n                        href=\"/profile\"\n                        onClick={() => setIsMobileMenuOpen(false)}\n                        className=\"flex items-center space-x-3 px-3 py-2 rounded-lg text-sm text-gray-600 hover:bg-gray-100 transition-colors\"\n                        data-testid=\"mobile-menu-profile\"\n                      >\n                        <User size={18} />\n                        <span>Profile</span>\n                      </Link>\n                      <Button \n                        variant=\"ghost\" \n                        onClick={handleLogout}\n                        className=\"w-full justify-start space-x-3 px-3 py-2 text-sm text-gray-600\"\n                        data-testid=\"mobile-menu-logout\"\n                      >\n                        <LogOut size={18} />\n                        <span>Log out</span>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":9587},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Home, \n  Users, \n  Calendar,\n  Heart,\n  MessageCircle,\n  Briefcase,\n  User,\n  Search\n} from \"lucide-react\";\n\nexport default function Navigation() {\n  const { isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const navItems = [\n    {\n      href: \"/\",\n      label: \"Home\",\n      icon: Home,\n      description: \"Your community dashboard\"\n    },\n    {\n      href: \"/members\",\n      label: \"Members\",\n      icon: Users,\n      description: \"Find and connect with community members\"\n    },\n    {\n      href: \"/events\",\n      label: \"Events\",\n      icon: Calendar,\n      description: \"Discover and attend community events\"\n    },\n    {\n      href: \"/help-desk\",\n      label: \"Help Desk\",\n      icon: Heart,\n      description: \"Emergency assistance and community support\",\n      badge: \"2\" // Active help requests\n    }\n  ];\n\n  const quickActions = [\n    {\n      href: \"/messages\",\n      label: \"Messages\",\n      icon: MessageCircle,\n      description: \"Chat with community members\"\n    },\n    {\n      href: \"/jobs\",\n      label: \"Jobs\",\n      icon: Briefcase,\n      description: \"Job opportunities and networking\"\n    },\n    {\n      href: \"/profile\",\n      label: \"Profile\",\n      icon: User,\n      description: \"Manage your profile and settings\"\n    }\n  ];\n\n  return (\n    <div className=\"bg-gray-50 border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4\">\n          {/* Main Navigation */}\n          {navItems.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.href} href={item.href}>\n                <Card className={`cursor-pointer transition-all hover:shadow-md ${\n                  isActive ? 'ring-2 ring-primary-500 bg-primary-50' : 'hover:bg-white'\n                }`}>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"relative mb-2\">\n                      <div className={`w-8 h-8 mx-auto rounded-lg flex items-center justify-center ${\n                        isActive ? 'bg-primary-500 text-white' : 'bg-gray-100 text-gray-600'\n                      }`}>\n                        <item.icon size={18} />\n                      </div>\n                      {item.badge && (\n                        <Badge \n                          className=\"absolute -top-2 -right-2 h-5 w-5 p-0 text-xs bg-red-500 text-white\"\n                          data-testid={`badge-${item.label.toLowerCase()}`}\n                        >\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </div>\n                    <h3 className={`font-medium text-sm ${\n                      isActive ? 'text-primary-700' : 'text-gray-900'\n                    }`} data-testid={`nav-title-${item.label.toLowerCase()}`}>\n                      {item.label}\n                    </h3>\n                    <p className=\"text-xs text-gray-500 mt-1 hidden sm:block\">\n                      {item.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n            );\n          })}\n\n          {/* Quick Actions */}\n          {quickActions.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.href} href={item.href}>\n                <Card className={`cursor-pointer transition-all hover:shadow-md lg:block hidden ${\n                  isActive ? 'ring-2 ring-primary-500 bg-primary-50' : 'hover:bg-white'\n                }`}>\n                  <CardContent className=\"p-4 text-center\">\n                    <div className={`w-8 h-8 mx-auto mb-2 rounded-lg flex items-center justify-center ${\n                      isActive ? 'bg-primary-500 text-white' : 'bg-gray-100 text-gray-600'\n                    }`}>\n                      <item.icon size={18} />\n                    </div>\n                    <h3 className={`font-medium text-sm ${\n                      isActive ? 'text-primary-700' : 'text-gray-900'\n                    }`} data-testid={`quick-nav-${item.label.toLowerCase()}`}>\n                      {item.label}\n                    </h3>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {item.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* Search Bar for Mobile */}\n        <div className=\"mt-4 md:hidden\">\n          <Card>\n            <CardContent className=\"p-3\">\n              <div className=\"flex items-center space-x-3 text-gray-500\">\n                <Search size={18} />\n                <span className=\"text-sm\">Search members, events, posts...</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5192},"client/src/components/post-card.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Heart, \n  MessageCircle, \n  Share, \n  MoreHorizontal,\n  MapPin,\n  Clock,\n  Trash2\n} from \"lucide-react\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Post } from \"@shared/schema\";\n\ninterface PostCardProps {\n  post: Post & {\n    author?: {\n      id: string;\n      firstName: string | null;\n      lastName: string | null;\n      profileImageUrl: string | null;\n    };\n  };\n}\n\nexport default function PostCard({ post }: PostCardProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isLiked, setIsLiked] = useState(false);\n\n  // Like post mutation\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", `/api/posts/${post.id}/like`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      setIsLiked(true);\n      toast({\n        title: \"Success\",\n        description: \"Post liked!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to like post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Unlike post mutation\n  const unlikeMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/posts/${post.id}/like`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      setIsLiked(false);\n      toast({\n        title: \"Success\",\n        description: \"Post unliked!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to unlike post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete post mutation\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/posts/${post.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Post deleted successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLikeToggle = () => {\n    if (isLiked) {\n      unlikeMutation.mutate();\n    } else {\n      likeMutation.mutate();\n    }\n  };\n\n  const handleDelete = () => {\n    if (window.confirm(\"Are you sure you want to delete this post?\")) {\n      deleteMutation.mutate();\n    }\n  };\n\n  const isOwnPost = user?.id === post.authorId;\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start space-x-4\">\n          {/* Author Avatar */}\n          <Avatar className=\"h-10 w-10 flex-shrink-0\">\n            <AvatarImage src={post.author?.profileImageUrl || \"\"} />\n            <AvatarFallback className=\"bg-primary-500 text-white\">\n              {(post.author?.firstName?.[0] || \"\") + (post.author?.lastName?.[0] || \"\")}\n            </AvatarFallback>\n          </Avatar>\n\n          <div className=\"flex-1 min-w-0\">\n            {/* Post Header */}\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center space-x-2\">\n                <h4 className=\"font-semibold text-gray-900\" data-testid={`text-author-${post.id}`}>\n                  {post.author?.firstName} {post.author?.lastName}\n                </h4>\n                {post.postType !== 'text' && (\n                  <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                    {post.postType}\n                  </Badge>\n                )}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex items-center space-x-1 text-gray-500\">\n                  <Clock size={14} />\n                  <span className=\"text-sm\" data-testid={`text-time-${post.id}`}>\n                    {formatDistanceToNow(new Date(post.createdAt))} ago\n                  </span>\n                </div>\n                \n                {isOwnPost && (\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\" data-testid={`button-more-${post.id}`}>\n                        <MoreHorizontal size={16} />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem \n                        onClick={handleDelete}\n                        className=\"text-red-600\"\n                        data-testid={`menu-delete-${post.id}`}\n                      >\n                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                        Delete Post\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                )}\n              </div>\n            </div>\n\n            {/* Post Content */}\n            <div className=\"mb-4\">\n              <p className=\"text-gray-700 leading-relaxed\" data-testid={`text-content-${post.id}`}>\n                {post.content}\n              </p>\n              \n              {/* Media Content */}\n              {post.mediaUrl && (\n                <div className=\"mt-3 rounded-lg overflow-hidden\">\n                  {post.postType === 'image' ? (\n                    <img \n                      src={post.mediaUrl} \n                      alt=\"Post media\" \n                      className=\"w-full h-auto max-h-96 object-cover\"\n                      data-testid={`img-media-${post.id}`}\n                    />\n                  ) : post.postType === 'video' ? (\n                    <video \n                      src={post.mediaUrl} \n                      controls \n                      className=\"w-full h-auto max-h-96\"\n                      data-testid={`video-media-${post.id}`}\n                    >\n                      Your browser does not support the video tag.\n                    </video>\n                  ) : null}\n                </div>\n              )}\n            </div>\n\n            {/* Post Actions */}\n            <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n              <div className=\"flex items-center space-x-6\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleLikeToggle}\n                  disabled={likeMutation.isPending || unlikeMutation.isPending}\n                  className={`flex items-center space-x-2 transition-colors ${\n                    isLiked ? 'text-red-500 hover:text-red-600' : 'text-gray-500 hover:text-red-500'\n                  }`}\n                  data-testid={`button-like-${post.id}`}\n                >\n                  <Heart size={16} className={isLiked ? 'fill-current' : ''} />\n                  <span>{post.likesCount || 0}</span>\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2 text-gray-500 hover:text-primary-500 transition-colors\"\n                  data-testid={`button-comment-${post.id}`}\n                >\n                  <MessageCircle size={16} />\n                  <span>{post.commentsCount || 0}</span>\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"flex items-center space-x-2 text-gray-500 hover:text-primary-500 transition-colors\"\n                  data-testid={`button-share-${post.id}`}\n                >\n                  <Share size={16} />\n                  <span>Share</span>\n                </Button>\n              </div>\n\n              {/* Additional post metadata can go here */}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9622},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/business-hub.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Building, Search, MapPin, Star, Users, TrendingUp, Award, ExternalLink, Phone, Mail } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Business {\n  id: string;\n  ownerId: string;\n  owner: {\n    firstName: string;\n    lastName: string;\n    profileImageUrl?: string;\n  };\n  businessName: string;\n  businessLogo?: string;\n  category: string;\n  description: string;\n  location: string;\n  website?: string;\n  phone?: string;\n  email?: string;\n  services: string[];\n  yearEstablished?: number;\n  employeeCount?: string;\n  rating: number;\n  reviewsCount: number;\n  isVerified: boolean;\n  isFeatured: boolean;\n  socialMedia: {\n    linkedin?: string;\n    facebook?: string;\n    instagram?: string;\n  };\n  createdAt: string;\n}\n\nexport default function BusinessHub() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n\n  const { data: businesses = [], isLoading } = useQuery<Business[]>({\n    queryKey: [\"/api/businesses\", searchTerm, selectedCategory, selectedLocation],\n  });\n\n  const { data: categories = [] } = useQuery<string[]>({\n    queryKey: [\"/api/businesses/categories\"],\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (businessId: string) => {\n      await apiRequest(`/api/businesses/${businessId}/contact`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contact Request Sent\",\n        description: \"Your contact request has been sent to the business owner.\",\n      });\n    },\n  });\n\n  const businessCategories = [\n    \"Technology\", \"Healthcare\", \"Finance\", \"Education\", \"Retail\", \"Restaurant\", \n    \"Real Estate\", \"Legal\", \"Consulting\", \"Manufacturing\", \"Construction\", \"Other\"\n  ];\n\n  const filteredBusinesses = businesses.filter(business => {\n    const matchesSearch = !searchTerm || \n      business.businessName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      business.services.some(service => service.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesCategory = !selectedCategory || business.category === selectedCategory;\n    const matchesLocation = !selectedLocation || business.location.toLowerCase().includes(selectedLocation.toLowerCase());\n    \n    return matchesSearch && matchesCategory && matchesLocation;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Building className=\"h-8 w-8 text-purple-600\" />\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n            Business Hub\n          </h1>\n        </div>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Discover and connect with community businesses and entrepreneurs\n        </p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">{businesses.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Total Businesses</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{businesses.filter(b => b.isVerified).length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Verified</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{businesses.filter(b => b.isFeatured).length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Featured</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">{categories.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Categories</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add Business Button */}\n      {user && (\n        <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"font-medium\">Promote your business</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Showcase your services to the community and grow your network\n                  </p>\n                </div>\n              </div>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\" data-testid=\"button-add-business\">\n                Add Your Business\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Find Businesses\n          </CardTitle>\n          <CardDescription>\n            Search for businesses and services within our community\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <Input\n                id=\"search\"\n                placeholder=\"Business name, services...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Categories</SelectItem>\n                  {businessCategories.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"City, State, Country\"\n                value={selectedLocation}\n                onChange={(e) => setSelectedLocation(e.target.value)}\n                data-testid=\"input-location\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Featured Businesses */}\n      {businesses.some(b => b.isFeatured) && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n            <Award className=\"h-5 w-5 text-yellow-500\" />\n            Featured Businesses\n          </h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n            {businesses.filter(b => b.isFeatured).slice(0, 3).map((business) => (\n              <Card key={business.id} className=\"overflow-hidden bg-gradient-to-br from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4\">\n                    <Avatar className=\"h-16 w-16\">\n                      <AvatarImage src={business.businessLogo} />\n                      <AvatarFallback className=\"bg-yellow-200 text-yellow-800 text-lg\">\n                        {business.businessName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"font-semibold\" data-testid={`text-name-${business.id}`}>\n                          {business.businessName}\n                        </h3>\n                        {business.isVerified && (\n                          <Badge className=\"bg-blue-500 text-white text-xs\">Verified</Badge>\n                        )}\n                      </div>\n                      \n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                        {business.category}\n                      </p>\n                      \n                      <div className=\"flex items-center gap-1 mb-2\">\n                        <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                        <span className=\"text-sm font-medium\">{business.rating}</span>\n                        <span className=\"text-sm text-gray-500\">({business.reviewsCount})</span>\n                      </div>\n                      \n                      <p className=\"text-sm line-clamp-2 mb-3\">\n                        {business.description}\n                      </p>\n                      \n                      <Button size=\"sm\" className=\"w-full\" data-testid={`button-view-${business.id}`}>\n                        View Business\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* All Businesses */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold\">All Businesses</h2>\n        {filteredBusinesses.map((business) => (\n          <Card key={business.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start gap-4\">\n                {/* Business Logo */}\n                <Avatar className=\"h-16 w-16\">\n                  <AvatarImage src={business.businessLogo} />\n                  <AvatarFallback className=\"bg-purple-100 text-purple-800 text-lg\">\n                    {business.businessName[0]}\n                  </AvatarFallback>\n                </Avatar>\n\n                {/* Business Details */}\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-semibold text-lg\" data-testid={`text-business-${business.id}`}>\n                          {business.businessName}\n                        </h3>\n                        {business.isVerified && (\n                          <Badge className=\"bg-blue-500 text-white\">Verified</Badge>\n                        )}\n                        {business.isFeatured && (\n                          <Badge className=\"bg-yellow-500 text-white\">Featured</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-purple-600 font-medium\">{business.category}</p>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"font-medium\">{business.rating}</span>\n                      <span className=\"text-gray-500\">({business.reviewsCount} reviews)</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400\">\n                    <div className=\"flex items-center gap-1\">\n                      <MapPin className=\"h-4 w-4\" />\n                      {business.location}\n                    </div>\n                    {business.yearEstablished && (\n                      <div>Est. {business.yearEstablished}</div>\n                    )}\n                    {business.employeeCount && (\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-4 w-4\" />\n                        {business.employeeCount} employees\n                      </div>\n                    )}\n                  </div>\n\n                  <p className=\"text-gray-700 dark:text-gray-300 line-clamp-2\">\n                    {business.description}\n                  </p>\n\n                  {/* Services */}\n                  <div className=\"flex flex-wrap gap-1\">\n                    {business.services.slice(0, 4).map((service, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        {service}\n                      </Badge>\n                    ))}\n                    {business.services.length > 4 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        +{business.services.length - 4} more\n                      </Badge>\n                    )}\n                  </div>\n\n                  {/* Owner Info */}\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Avatar className=\"h-6 w-6\">\n                      <AvatarImage src={business.owner.profileImageUrl} />\n                      <AvatarFallback className=\"text-xs\">\n                        {business.owner.firstName[0]}{business.owner.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-gray-600 dark:text-gray-400\">\n                      Owned by {business.owner.firstName} {business.owner.lastName}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex flex-col gap-2\">\n                  <Button\n                    onClick={() => contactMutation.mutate(business.id)}\n                    disabled={contactMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid={`button-contact-${business.id}`}\n                  >\n                    {contactMutation.isPending ? \"Contacting...\" : \"Contact\"}\n                  </Button>\n                  \n                  <div className=\"flex gap-1\">\n                    {business.phone && (\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-phone-${business.id}`}>\n                        <Phone className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    {business.email && (\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-email-${business.id}`}>\n                        <Mail className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                    {business.website && (\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-website-${business.id}`}>\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredBusinesses.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Building className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">No Businesses Found</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Try adjusting your search criteria to find more businesses\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17010},"client/src/pages/events.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Navigation from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Calendar, \n  MapPin, \n  Users, \n  Clock, \n  Plus, \n  User,\n  CheckCircle,\n  XCircle,\n  DollarSign,\n  Filter\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Event } from \"@shared/schema\";\n\nexport default function Events() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isCreateEventOpen, setIsCreateEventOpen] = useState(false);\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    description: \"\",\n    location: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    maxAttendees: \"\",\n    ticketPrice: \"\",\n    isPublic: true\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Fetch events\n  const { data: events, isLoading: eventsLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n    retry: false,\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (eventData: any) => {\n      await apiRequest(\"POST\", \"/api/events\", {\n        ...eventData,\n        startDate: new Date(eventData.startDate).toISOString(),\n        endDate: eventData.endDate ? new Date(eventData.endDate).toISOString() : null,\n        maxAttendees: eventData.maxAttendees ? parseInt(eventData.maxAttendees) : null,\n        ticketPrice: eventData.ticketPrice ? Math.round(parseFloat(eventData.ticketPrice) * 100) : 0, // Convert to cents\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      setIsCreateEventOpen(false);\n      setNewEvent({\n        title: \"\",\n        description: \"\",\n        location: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        maxAttendees: \"\",\n        ticketPrice: \"\",\n        isPublic: true\n      });\n      toast({\n        title: \"Success\",\n        description: \"Event created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create event. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // RSVP mutation\n  const rsvpMutation = useMutation({\n    mutationFn: async ({ eventId, status }: { eventId: string; status: string }) => {\n      await apiRequest(\"POST\", `/api/events/${eventId}/rsvp`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n      toast({\n        title: \"Success\",\n        description: \"RSVP updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update RSVP. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateEvent = () => {\n    if (!newEvent.title.trim() || !newEvent.startDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createEventMutation.mutate(newEvent);\n  };\n\n  const handleRSVP = (eventId: string, status: string) => {\n    rsvpMutation.mutate({ eventId, status });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'upcoming': return 'bg-green-500';\n      case 'ongoing': return 'bg-blue-500';\n      case 'completed': return 'bg-gray-500';\n      case 'cancelled': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading events...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Community Events</h1>\n            <p className=\"text-gray-600\">Discover and join cultural events, festivals, and gatherings</p>\n          </div>\n          \n          <Dialog open={isCreateEventOpen} onOpenChange={setIsCreateEventOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-primary-500 hover:bg-primary-600\" data-testid=\"button-create-event\">\n                <Plus size={16} className=\"mr-2\" />\n                Create Event\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Event</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"title\">Event Title *</Label>\n                  <Input\n                    id=\"title\"\n                    value={newEvent.title}\n                    onChange={(e) => setNewEvent(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Enter event title\"\n                    data-testid=\"input-event-title\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newEvent.description}\n                    onChange={(e) => setNewEvent(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Describe your event...\"\n                    className=\"min-h-[100px]\"\n                    data-testid=\"textarea-event-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      value={newEvent.location}\n                      onChange={(e) => setNewEvent(prev => ({ ...prev, location: e.target.value }))}\n                      placeholder=\"Event location\"\n                      data-testid=\"input-event-location\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"maxAttendees\">Max Attendees</Label>\n                    <Input\n                      id=\"maxAttendees\"\n                      type=\"number\"\n                      value={newEvent.maxAttendees}\n                      onChange={(e) => setNewEvent(prev => ({ ...prev, maxAttendees: e.target.value }))}\n                      placeholder=\"Optional\"\n                      data-testid=\"input-max-attendees\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"startDate\">Start Date & Time *</Label>\n                    <Input\n                      id=\"startDate\"\n                      type=\"datetime-local\"\n                      value={newEvent.startDate}\n                      onChange={(e) => setNewEvent(prev => ({ ...prev, startDate: e.target.value }))}\n                      data-testid=\"input-start-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"endDate\">End Date & Time</Label>\n                    <Input\n                      id=\"endDate\"\n                      type=\"datetime-local\"\n                      value={newEvent.endDate}\n                      onChange={(e) => setNewEvent(prev => ({ ...prev, endDate: e.target.value }))}\n                      data-testid=\"input-end-date\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"ticketPrice\">Ticket Price (₹)</Label>\n                  <Input\n                    id=\"ticketPrice\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={newEvent.ticketPrice}\n                    onChange={(e) => setNewEvent(prev => ({ ...prev, ticketPrice: e.target.value }))}\n                    placeholder=\"0.00 (Free event)\"\n                    data-testid=\"input-ticket-price\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setIsCreateEventOpen(false)} data-testid=\"button-cancel-event\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleCreateEvent}\n                    disabled={createEventMutation.isPending}\n                    className=\"bg-primary-500 hover:bg-primary-600\"\n                    data-testid=\"button-save-event\"\n                  >\n                    {createEventMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    ) : (\n                      \"Create Event\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filter Bar */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-upcoming\">\n                All Events\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter-my-events\">\n                My Events\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter-attending\">\n                Attending\n              </Button>\n              <div className=\"flex-1\"></div>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filters\">\n                <Filter size={16} className=\"mr-2\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Events List */}\n        {eventsLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <div className=\"flex space-x-2\">\n                      <Skeleton className=\"h-8 w-20\" />\n                      <Skeleton className=\"h-8 w-20\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : events && events.length > 0 ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {events.map((event) => (\n              <Card key={event.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"mb-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h3 className=\"font-semibold text-lg text-gray-900 line-clamp-2\" data-testid={`text-event-title-${event.id}`}>\n                        {event.title}\n                      </h3>\n                      <Badge className={`text-xs text-white ${getStatusColor(event.status)} capitalize`}>\n                        {event.status}\n                      </Badge>\n                    </div>\n                    \n                    {event.description && (\n                      <p className=\"text-gray-600 text-sm line-clamp-3 mb-4\" data-testid={`text-event-description-${event.id}`}>\n                        {event.description}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-3 mb-4\">\n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Calendar size={16} />\n                      <span className=\"text-sm\" data-testid={`text-event-date-${event.id}`}>\n                        {format(new Date(event.startDate), \"MMM dd, yyyy 'at' h:mm a\")}\n                      </span>\n                    </div>\n                    \n                    {event.location && (\n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <MapPin size={16} />\n                        <span className=\"text-sm truncate\" data-testid={`text-event-location-${event.id}`}>\n                          {event.location}\n                        </span>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-2 text-gray-600\">\n                      <Users size={16} />\n                      <span className=\"text-sm\" data-testid={`text-event-attendees-${event.id}`}>\n                        {event.currentAttendees || 0} attending\n                        {event.maxAttendees && ` / ${event.maxAttendees} max`}\n                      </span>\n                    </div>\n\n                    {event.ticketPrice && event.ticketPrice > 0 && (\n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <DollarSign size={16} />\n                        <span className=\"text-sm\" data-testid={`text-event-price-${event.id}`}>\n                          ₹{(event.ticketPrice / 100).toFixed(2)}\n                        </span>\n                      </div>\n                    )}\n\n                    {(event as any).organizer && (\n                      <div className=\"flex items-center space-x-2\">\n                        <User size={16} className=\"text-gray-400\" />\n                        <div className=\"flex items-center space-x-2\">\n                          <Avatar className=\"h-6 w-6\">\n                            <AvatarImage src={(event as any).organizer.profileImageUrl || \"\"} />\n                            <AvatarFallback className=\"text-xs bg-primary-500 text-white\">\n                              {((event as any).organizer.firstName?.[0] || \"\") + ((event as any).organizer.lastName?.[0] || \"\")}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"text-sm text-gray-600\" data-testid={`text-organizer-${event.id}`}>\n                            {(event as any).organizer.firstName} {(event as any).organizer.lastName}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {event.status === 'upcoming' && (\n                    <div className=\"flex space-x-2 pt-4 border-t border-gray-100\">\n                      <Button \n                        size=\"sm\"\n                        onClick={() => handleRSVP(event.id, 'attending')}\n                        disabled={rsvpMutation.isPending}\n                        className=\"flex-1 bg-primary-500 hover:bg-primary-600\"\n                        data-testid={`button-attend-${event.id}`}\n                      >\n                        <CheckCircle size={14} className=\"mr-1\" />\n                        Attend\n                      </Button>\n                      <Button \n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRSVP(event.id, 'not_attending')}\n                        disabled={rsvpMutation.isPending}\n                        className=\"flex-1\"\n                        data-testid={`button-decline-${event.id}`}\n                      >\n                        <XCircle size={14} className=\"mr-1\" />\n                        Pass\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No events found</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Be the first to create an event for the community!\n              </p>\n              <Button \n                onClick={() => setIsCreateEventOpen(true)}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n                data-testid=\"button-create-first-event\"\n              >\n                <Plus size={16} className=\"mr-2\" />\n                Create First Event\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":18783},"client/src/pages/help-desk.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Navigation from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  AlertTriangle,\n  Heart,\n  MapPin,\n  Clock,\n  User,\n  MessageCircle,\n  Plus,\n  Send,\n  Filter,\n  Activity\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { HelpRequest } from \"@shared/schema\";\n\nexport default function HelpDesk() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isCreateRequestOpen, setIsCreateRequestOpen] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState<string | null>(null);\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [newRequest, setNewRequest] = useState({\n    title: \"\",\n    description: \"\",\n    type: \"other\" as const,\n    location: \"\",\n    urgencyLevel: 1\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Fetch help requests\n  const { data: helpRequests, isLoading: requestsLoading } = useQuery<HelpRequest[]>({\n    queryKey: [\"/api/help-requests\"],\n    retry: false,\n    refetchInterval: 30000, // Refetch every 30 seconds for real-time updates\n  });\n\n  // Create help request mutation\n  const createRequestMutation = useMutation({\n    mutationFn: async (requestData: any) => {\n      await apiRequest(\"POST\", \"/api/help-requests\", requestData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/help-requests\"] });\n      setIsCreateRequestOpen(false);\n      setNewRequest({\n        title: \"\",\n        description: \"\",\n        type: \"other\",\n        location: \"\",\n        urgencyLevel: 1\n      });\n      toast({\n        title: \"Success\",\n        description: \"Help request created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create help request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Respond to help request mutation\n  const respondMutation = useMutation({\n    mutationFn: async ({ requestId, message }: { requestId: string; message: string }) => {\n      await apiRequest(\"POST\", `/api/help-requests/${requestId}/respond`, { message });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/help-requests\"] });\n      setSelectedRequest(null);\n      setResponseMessage(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Response sent successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send response. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateRequest = () => {\n    if (!newRequest.title.trim() || !newRequest.description.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createRequestMutation.mutate(newRequest);\n  };\n\n  const handleRespond = () => {\n    if (!responseMessage.trim() || !selectedRequest) return;\n    respondMutation.mutate({ requestId: selectedRequest, message: responseMessage });\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'medical': return 'bg-red-500';\n      case 'travel': return 'bg-blue-500';\n      case 'safety': return 'bg-orange-500';\n      case 'other': return 'bg-gray-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getUrgencyColor = (level: number) => {\n    if (level >= 4) return 'bg-red-500';\n    if (level >= 3) return 'bg-orange-500';\n    if (level >= 2) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  const getUrgencyText = (level: number) => {\n    if (level >= 4) return 'Critical';\n    if (level >= 3) return 'High';\n    if (level >= 2) return 'Medium';\n    return 'Low';\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading help desk...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2 flex items-center space-x-3\">\n              <Heart className=\"text-red-500\" />\n              <span>Community Help Desk</span>\n            </h1>\n            <p className=\"text-gray-600\">Get help from fellow community members during emergencies</p>\n          </div>\n          \n          <Dialog open={isCreateRequestOpen} onOpenChange={setIsCreateRequestOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"btn-emergency\" data-testid=\"button-request-help\">\n                <AlertTriangle size={16} className=\"mr-2\" />\n                Request Help\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center space-x-2\">\n                  <AlertTriangle className=\"text-red-500\" />\n                  <span>Request Community Help</span>\n                </DialogTitle>\n              </DialogHeader>\n              \n              <Alert className=\"mb-4\">\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  This help request will be visible to nearby community members who can assist you.\n                  For medical emergencies, please call local emergency services first.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"title\">Help Request Title *</Label>\n                  <Input\n                    id=\"title\"\n                    value={newRequest.title}\n                    onChange={(e) => setNewRequest(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Brief description of what you need help with\"\n                    data-testid=\"input-help-title\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Detailed Description *</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newRequest.description}\n                    onChange={(e) => setNewRequest(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Provide more details about your situation and what kind of help you need...\"\n                    className=\"min-h-[120px]\"\n                    data-testid=\"textarea-help-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"type\">Type of Help</Label>\n                    <Select\n                      value={newRequest.type}\n                      onValueChange={(value: any) => setNewRequest(prev => ({ ...prev, type: value }))}\n                    >\n                      <SelectTrigger data-testid=\"select-help-type\">\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"medical\">Medical Emergency</SelectItem>\n                        <SelectItem value=\"travel\">Travel Assistance</SelectItem>\n                        <SelectItem value=\"safety\">Safety & Security</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"urgency\">Urgency Level</Label>\n                    <Select\n                      value={newRequest.urgencyLevel.toString()}\n                      onValueChange={(value) => setNewRequest(prev => ({ ...prev, urgencyLevel: parseInt(value) }))}\n                    >\n                      <SelectTrigger data-testid=\"select-urgency\">\n                        <SelectValue placeholder=\"Select urgency\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">Low - Can wait a few hours</SelectItem>\n                        <SelectItem value=\"2\">Medium - Needed today</SelectItem>\n                        <SelectItem value=\"3\">High - Needed within hour</SelectItem>\n                        <SelectItem value=\"4\">Critical - Immediate assistance</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"location\">Location (Optional)</Label>\n                  <Input\n                    id=\"location\"\n                    value={newRequest.location}\n                    onChange={(e) => setNewRequest(prev => ({ ...prev, location: e.target.value }))}\n                    placeholder=\"Where are you located? (helps volunteers find you)\"\n                    data-testid=\"input-help-location\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setIsCreateRequestOpen(false)} data-testid=\"button-cancel-help\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleCreateRequest}\n                    disabled={createRequestMutation.isPending}\n                    className=\"btn-emergency\"\n                    data-testid=\"button-submit-help\"\n                  >\n                    {createRequestMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    ) : (\n                      \"Submit Request\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Active Requests Alert */}\n        {helpRequests && helpRequests.length > 0 && (\n          <Alert className=\"mb-6 border-red-200 bg-red-50\">\n            <Activity className=\"h-4 w-4 text-red-500\" />\n            <AlertDescription className=\"text-red-800\">\n              <strong>{helpRequests.length}</strong> active help request{helpRequests.length !== 1 ? 's' : ''} \n              from community members. Your assistance could make a difference!\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Filter Bar */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-all\">\n                All Requests\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter-medical\">\n                Medical\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter-travel\">\n                Travel\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-filter-safety\">\n                Safety\n              </Button>\n              <div className=\"flex-1\"></div>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-more-filters\">\n                <Filter size={16} className=\"mr-2\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Help Requests List */}\n        {requestsLoading ? (\n          <div className=\"space-y-6\">\n            {[...Array(3)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Skeleton className=\"w-12 h-12 rounded-full\" />\n                    <div className=\"flex-1 space-y-3\">\n                      <Skeleton className=\"h-5 w-3/4\" />\n                      <Skeleton className=\"h-4 w-full\" />\n                      <Skeleton className=\"h-4 w-2/3\" />\n                      <div className=\"flex space-x-2\">\n                        <Skeleton className=\"h-6 w-20\" />\n                        <Skeleton className=\"h-6 w-16\" />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : helpRequests && helpRequests.length > 0 ? (\n          <div className=\"space-y-6\">\n            {helpRequests.map((request) => (\n              <Card key={request.id} className=\"border-l-4 border-l-red-500\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-start space-x-4 flex-1\">\n                      {(request as any).requester && (\n                        <Avatar className=\"h-12 w-12\">\n                          <AvatarImage src={(request as any).requester.profileImageUrl || \"\"} />\n                          <AvatarFallback className=\"bg-primary-500 text-white\">\n                            {((request as any).requester.firstName?.[0] || \"\") + ((request as any).requester.lastName?.[0] || \"\")}\n                          </AvatarFallback>\n                        </Avatar>\n                      )}\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"font-semibold text-lg text-gray-900\" data-testid={`text-request-title-${request.id}`}>\n                            {request.title}\n                          </h3>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={`text-xs text-white ${getTypeColor(request.type)} capitalize`}>\n                              {request.type}\n                            </Badge>\n                            <Badge className={`text-xs text-white ${getUrgencyColor(request.urgencyLevel)}`}>\n                              {getUrgencyText(request.urgencyLevel)}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        {(request as any).requester && (\n                          <div className=\"flex items-center space-x-4 text-gray-600 mb-3\">\n                            <div className=\"flex items-center space-x-1\">\n                              <User size={14} />\n                              <span className=\"text-sm\" data-testid={`text-requester-${request.id}`}>\n                                {(request as any).requester.firstName} {(request as any).requester.lastName}\n                              </span>\n                            </div>\n                            {(request as any).requester.location && (\n                              <div className=\"flex items-center space-x-1\">\n                                <MapPin size={14} />\n                                <span className=\"text-sm\" data-testid={`text-requester-location-${request.id}`}>\n                                  {(request as any).requester.location}\n                                </span>\n                              </div>\n                            )}\n                            <div className=\"flex items-center space-x-1\">\n                              <Clock size={14} />\n                              <span className=\"text-sm\" data-testid={`text-request-time-${request.id}`}>\n                                {formatDistanceToNow(new Date(request.createdAt))} ago\n                              </span>\n                            </div>\n                          </div>\n                        )}\n\n                        <p className=\"text-gray-700 mb-4\" data-testid={`text-request-description-${request.id}`}>\n                          {request.description}\n                        </p>\n\n                        {request.location && (\n                          <div className=\"flex items-center space-x-2 text-gray-600 mb-4\">\n                            <MapPin size={16} />\n                            <span className=\"text-sm\" data-testid={`text-request-location-${request.id}`}>\n                              <strong>Location:</strong> {request.location}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-between items-center pt-4 border-t border-gray-100\">\n                    <div className=\"text-sm text-gray-500\">\n                      Status: <span className=\"capitalize font-medium\">{request.status}</span>\n                    </div>\n                    <div className=\"flex space-x-3\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            size=\"sm\"\n                            className=\"bg-primary-500 hover:bg-primary-600\"\n                            onClick={() => setSelectedRequest(request.id)}\n                            data-testid={`button-respond-${request.id}`}\n                          >\n                            <MessageCircle size={14} className=\"mr-1\" />\n                            Respond\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Respond to Help Request</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4 py-4\">\n                            <div>\n                              <Label htmlFor=\"response\">Your Response</Label>\n                              <Textarea\n                                id=\"response\"\n                                value={responseMessage}\n                                onChange={(e) => setResponseMessage(e.target.value)}\n                                placeholder=\"Let them know how you can help or provide guidance...\"\n                                className=\"min-h-[100px]\"\n                                data-testid=\"textarea-response\"\n                              />\n                            </div>\n                            <div className=\"flex justify-end space-x-3\">\n                              <Button variant=\"outline\" onClick={() => {\n                                setSelectedRequest(null);\n                                setResponseMessage(\"\");\n                              }}>\n                                Cancel\n                              </Button>\n                              <Button \n                                onClick={handleRespond}\n                                disabled={respondMutation.isPending || !responseMessage.trim()}\n                                className=\"bg-primary-500 hover:bg-primary-600\"\n                                data-testid=\"button-send-response\"\n                              >\n                                {respondMutation.isPending ? (\n                                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                                ) : (\n                                  <>\n                                    <Send size={14} className=\"mr-1\" />\n                                    Send Response\n                                  </>\n                                )}\n                              </Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Heart className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No active help requests</h3>\n              <p className=\"text-gray-600 mb-6\">\n                Great news! There are currently no active help requests in the community.\n              </p>\n              <div className=\"bg-green-50 rounded-lg p-6 max-w-md mx-auto\">\n                <h4 className=\"font-medium text-green-900 mb-2\">How the Help Desk works:</h4>\n                <ul className=\"text-sm text-green-800 space-y-1 text-left\">\n                  <li>• Community members can request help during emergencies</li>\n                  <li>• Requests are visible to nearby volunteers</li>\n                  <li>• Volunteers can respond with assistance or guidance</li>\n                  <li>• All communications are tracked for safety</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":23331},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Navigation from \"@/components/navigation\";\nimport PostCard from \"@/components/post-card\";\nimport EmergencyButton from \"@/components/emergency-button\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Calendar, Briefcase, Search, Plus, MessageCircle, Heart, Bell, MapPin, Star, ChevronRight, HelpCircle, Home as HomeIcon, Building, Clock, TrendingUp, Award } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Post, Event, HelpRequest, Job, Business } from \"@shared/schema\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [newPostContent, setNewPostContent] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Fetch data for home page\n  const { data: postsData, isLoading: postsLoading } = useQuery<{data: Post[]}>({\n    queryKey: [\"/api/posts\"],\n    retry: false,\n  });\n  const posts = postsData?.data || [];\n\n  const { data: eventsData } = useQuery<{data: Event[]}>({\n    queryKey: [\"/api/events\"],\n    retry: false,\n  });\n  const events = eventsData?.data || [];\n\n  const { data: helpRequestsData } = useQuery<{data: HelpRequest[]}>({\n    queryKey: [\"/api/help-requests\"],\n    retry: false,\n  });\n  const helpRequests = helpRequestsData?.data || [];\n\n  const { data: jobsData } = useQuery<{data: Job[]}>({\n    queryKey: [\"/api/jobs\"],\n    retry: false,\n  });\n  const jobs = jobsData?.data || [];\n\n  const { data: businessesData } = useQuery<{data: Business[]}>({\n    queryKey: [\"/api/businesses\"],\n    retry: false,\n  });\n  const businesses = businessesData?.data || [];\n\n  // Create post mutation\n  const createPostMutation = useMutation({\n    mutationFn: async (content: string) => {\n      await apiRequest(\"POST\", \"/api/posts\", { content, postType: \"text\" });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/posts\"] });\n      setNewPostContent(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Post created successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create post. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatePost = () => {\n    if (!newPostContent.trim()) return;\n    createPostMutation.mutate(newPostContent);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading Digital House...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <Navigation />\n      \n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Main Feed */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Hero Community Section */}\n            <Card className=\"bg-gradient-to-br from-primary-500 via-primary-600 to-accent-500 text-white border-0 overflow-hidden relative\">\n              <div className=\"absolute inset-0 bg-black/10\"></div>\n              <CardContent className=\"p-6 relative z-10\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center\">\n                      <HomeIcon className=\"text-white\" size={28} />\n                    </div>\n                    <div>\n                      <h1 className=\"font-bold text-2xl\" data-testid=\"text-welcome\">\n                        Vanakkam {user?.firstName || \"Member\"}! 🎉\n                      </h1>\n                      <p className=\"text-white text-opacity-90 text-lg\" data-testid=\"text-location\">\n                        Your Digital House is buzzing today\n                      </p>\n                    </div>\n                  </div>\n                  <EmergencyButton />\n                </div>\n\n                {/* Live Community Pulse */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"bg-white bg-opacity-15 rounded-lg p-3 text-center backdrop-blur-sm\">\n                    <div className=\"text-2xl font-bold\">{posts.length}</div>\n                    <div className=\"text-sm opacity-90\">Posts Today</div>\n                  </div>\n                  <div className=\"bg-white bg-opacity-15 rounded-lg p-3 text-center backdrop-blur-sm\">\n                    <div className=\"text-2xl font-bold\">{helpRequests.filter(req => req.status === 'active').length}</div>\n                    <div className=\"text-sm opacity-90\">Help Requests</div>\n                  </div>\n                  <div className=\"bg-white bg-opacity-15 rounded-lg p-3 text-center backdrop-blur-sm\">\n                    <div className=\"text-2xl font-bold\">{events.length}</div>\n                    <div className=\"text-sm opacity-90\">Upcoming Events</div>\n                  </div>\n                  <div className=\"bg-white bg-opacity-15 rounded-lg p-3 text-center backdrop-blur-sm\">\n                    <div className=\"text-2xl font-bold\">247</div>\n                    <div className=\"text-sm opacity-90\">Online Now</div>\n                  </div>\n                </div>\n\n                {/* Call-to-Action Buttons */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                  <Button \n                    variant=\"secondary\" \n                    className=\"bg-white/20 hover:bg-white/30 text-white border-white/30 h-12\"\n                    data-testid=\"button-share-update\"\n                  >\n                    <Plus size={16} className=\"mr-2\" />\n                    Share Update\n                  </Button>\n                  <Link href=\"/help-desk\">\n                    <Button \n                      variant=\"secondary\" \n                      className=\"bg-white/20 hover:bg-white/30 text-white border-white/30 h-12 w-full\"\n                      data-testid=\"button-ask-help\"\n                    >\n                      <HelpCircle size={16} className=\"mr-2\" />\n                      Ask for Help\n                    </Button>\n                  </Link>\n                  <Link href=\"/jobs\">\n                    <Button \n                      variant=\"secondary\" \n                      className=\"bg-white/20 hover:bg-white/30 text-white border-white/30 h-12 w-full\"\n                      data-testid=\"button-post-job\"\n                    >\n                      <Briefcase size={16} className=\"mr-2\" />\n                      Post a Job\n                    </Button>\n                  </Link>\n                  <Link href=\"/business\">\n                    <Button \n                      variant=\"secondary\" \n                      className=\"bg-white/20 hover:bg-white/30 text-white border-white/30 h-12 w-full\"\n                      data-testid=\"button-business-rooms\"\n                    >\n                      <Building size={16} className=\"mr-2\" />\n                      Business Rooms\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Create Post */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg\">Share with Community</CardTitle>\n                  <Button\n                    onClick={handleCreatePost}\n                    disabled={!newPostContent.trim() || createPostMutation.isPending}\n                    className=\"bg-primary-500 hover:bg-primary-600\"\n                    data-testid=\"button-create-post\"\n                  >\n                    {createPostMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    ) : (\n                      <>\n                        <Plus size={16} className=\"mr-2\" />\n                        Post\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"What's on your mind? Share updates, events, or connect with the community...\"\n                  value={newPostContent}\n                  onChange={(e) => setNewPostContent(e.target.value)}\n                  className=\"min-h-[100px] resize-none\"\n                  data-testid=\"textarea-new-post\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Central Activity Feed */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold text-gray-900\">Community Activity Feed</h2>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"secondary\" className=\"bg-red-100 text-red-700\">\n                    <Bell size={12} className=\"mr-1\" />\n                    2 Urgent\n                  </Badge>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <TrendingUp size={16} className=\"mr-2\" />\n                    Live Feed\n                  </Button>\n                </div>\n              </div>\n\n              {/* Priority Pinned Items */}\n              {helpRequests.filter(req => req.urgencyLevel && req.urgencyLevel >= 4).length > 0 && (\n                <Card className=\"mb-4 border-red-200 bg-red-50\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"destructive\">Urgent</Badge>\n                      <CardTitle className=\"text-red-800\">Priority Help Requests</CardTitle>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    {helpRequests.filter(req => req.urgencyLevel && req.urgencyLevel >= 4).slice(0, 2).map((request) => (\n                      <div key={request.id} className=\"flex items-center justify-between p-3 bg-white rounded-lg mb-2 last:mb-0\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-red-900\">{request.title}</h4>\n                          <p className=\"text-sm text-red-700\">{request.location}</p>\n                        </div>\n                        <Button size=\"sm\" className=\"bg-red-600 hover:bg-red-700\">\n                          I Can Help\n                        </Button>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              )}\n\n              {postsLoading ? (\n                <div className=\"space-y-6\">\n                  {[...Array(3)].map((_, i) => (\n                    <Card key={i}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4\">\n                          <Skeleton className=\"w-10 h-10 rounded-full\" />\n                          <div className=\"flex-1 space-y-2\">\n                            <Skeleton className=\"h-4 w-32\" />\n                            <Skeleton className=\"h-4 w-full\" />\n                            <Skeleton className=\"h-4 w-3/4\" />\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : posts.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {posts.map((post) => (\n                    <PostCard key={post.id} post={post} />\n                  ))}\n                </div>\n              ) : (\n                <Card>\n                  <CardContent className=\"p-12 text-center\">\n                    <MessageCircle className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Start the conversation!</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Be the first to share something with the community today\n                    </p>\n                    <Button \n                      onClick={() => setNewPostContent(\"Hello Digital House community! 👋 Excited to connect with everyone here!\")}\n                      className=\"bg-primary-500 hover:bg-primary-600\"\n                      data-testid=\"button-first-post\"\n                    >\n                      Create First Post\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n\n          {/* Community Power Panels */}\n          <div className=\"space-y-6\">\n            {/* Real-Time Help Board */}\n            <Card className=\"border-orange-200\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-orange-800 flex items-center gap-2\">\n                    <HelpCircle size={18} />\n                    Help Board\n                  </CardTitle>\n                  <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700\">\n                    {helpRequests.filter(req => req.status === 'active').length} Active\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                {helpRequests.filter(req => req.status === 'active').slice(0, 3).map((request) => (\n                  <div key={request.id} className=\"p-3 bg-orange-50 rounded-lg border border-orange-200\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium text-orange-900 text-sm line-clamp-1\">{request.title}</h4>\n                      <Badge variant={request.urgencyLevel >= 4 ? \"destructive\" : \"secondary\"} className=\"text-xs\">\n                        {request.urgencyLevel >= 4 ? \"Urgent\" : \"Normal\"}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center text-xs text-orange-700\">\n                        <MapPin size={12} className=\"mr-1\" />\n                        {request.location}\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs h-6 px-2 border-orange-300 text-orange-700 hover:bg-orange-100\">\n                        I Can Help\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                <Link href=\"/help-desk\">\n                  <Button variant=\"outline\" className=\"w-full text-orange-700 border-orange-300 hover:bg-orange-50\">\n                    View All Requests\n                    <ChevronRight size={14} className=\"ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Business Rooms Spotlight */}\n            <Card className=\"border-blue-200\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-blue-800 flex items-center gap-2\">\n                    <Building size={18} />\n                    Business Spotlight\n                  </CardTitle>\n                  <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700\">\n                    {businesses.length} Active\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                {businesses.slice(0, 3).map((business) => (\n                  <div key={business.id} className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-200 rounded-lg flex items-center justify-center\">\n                        <Building size={14} className=\"text-blue-700\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-blue-900 text-sm line-clamp-1\">{business.businessName}</h4>\n                        <p className=\"text-xs text-blue-700 line-clamp-1\">{business.category}</p>\n                        <div className=\"flex items-center justify-between mt-2\">\n                          <div className=\"flex items-center text-xs text-blue-600\">\n                            <Star size={10} className=\"mr-1 fill-current\" />\n                            {business.rating}/5\n                          </div>\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs h-6 px-2 border-blue-300 text-blue-700 hover:bg-blue-100\">\n                            Connect\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <Link href=\"/business\">\n                  <Button variant=\"outline\" className=\"w-full text-blue-700 border-blue-300 hover:bg-blue-50\">\n                    View All Businesses\n                    <ChevronRight size={14} className=\"ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Jobs Highlights */}\n            <Card className=\"border-green-200\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-green-800 flex items-center gap-2\">\n                    <Briefcase size={18} />\n                    Latest Jobs\n                  </CardTitle>\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                    {jobs.length} Open\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                {jobs.slice(0, 3).map((job) => (\n                  <div key={job.id} className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium text-green-900 text-sm line-clamp-1\">{job.title}</h4>\n                      {job.isUrgent && (\n                        <Badge variant=\"destructive\" className=\"text-xs\">Urgent</Badge>\n                      )}\n                    </div>\n                    <p className=\"text-xs text-green-700 mb-2\">{job.company}</p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center text-xs text-green-600\">\n                        <MapPin size={10} className=\"mr-1\" />\n                        {job.isRemote ? \"Remote\" : job.location}\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs h-6 px-2 border-green-300 text-green-700 hover:bg-green-100\">\n                        Apply\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                <Link href=\"/jobs\">\n                  <Button variant=\"outline\" className=\"w-full text-green-700 border-green-300 hover:bg-green-50\">\n                    View All Jobs\n                    <ChevronRight size={14} className=\"ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Matrimony Matches */}\n            <Card className=\"border-pink-200\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-pink-800 flex items-center gap-2\">\n                    <Heart size={18} />\n                    Matrimony\n                  </CardTitle>\n                  <Badge variant=\"secondary\" className=\"bg-pink-100 text-pink-700\">\n                    2 New\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                <div className=\"p-3 bg-pink-50 rounded-lg border border-pink-200\">\n                  <h4 className=\"font-medium text-pink-900 text-sm mb-1\">New profiles added</h4>\n                  <p className=\"text-xs text-pink-700 mb-2\">Based on your preferences</p>\n                  <Button size=\"sm\" variant=\"outline\" className=\"w-full text-pink-700 border-pink-300 hover:bg-pink-100\">\n                    View Matches\n                  </Button>\n                </div>\n                <Link href=\"/matrimony\">\n                  <Button variant=\"outline\" className=\"w-full text-pink-700 border-pink-300 hover:bg-pink-50\">\n                    View All Profiles\n                    <ChevronRight size={14} className=\"ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Community Recognition */}\n            <Card className=\"border-purple-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-purple-800 flex items-center gap-2\">\n                  <Award size={18} />\n                  Community Heroes\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between p-2 bg-purple-50 rounded-lg\">\n                    <span className=\"text-sm text-purple-900\">Helping Hand</span>\n                    <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700 text-xs\">Priya K.</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-2 bg-purple-50 rounded-lg\">\n                    <span className=\"text-sm text-purple-900\">Business Builder</span>\n                    <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700 text-xs\">Ravi S.</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23724},"client/src/pages/jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Briefcase, Search, MapPin, Clock, DollarSign, Building, Users, Star, ExternalLink } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Job {\n  id: string;\n  title: string;\n  company: string;\n  companyLogo?: string;\n  description: string;\n  location: string;\n  type: 'full-time' | 'part-time' | 'contract' | 'remote';\n  experienceLevel: 'entry' | 'mid' | 'senior' | 'executive';\n  salaryRange: string;\n  skills: string[];\n  benefits: string[];\n  postedById: string;\n  postedBy: {\n    firstName: string;\n    lastName: string;\n    profileImageUrl?: string;\n  };\n  applicationsCount: number;\n  isUrgent: boolean;\n  isRemote: boolean;\n  createdAt: string;\n}\n\nexport default function Jobs() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n  const [selectedType, setSelectedType] = useState(\"\");\n  const [selectedLevel, setSelectedLevel] = useState(\"\");\n\n  const { data: jobs = [], isLoading } = useQuery<Job[]>({\n    queryKey: [\"/api/jobs\", searchTerm, selectedLocation, selectedType, selectedLevel],\n  });\n\n  const { data: myApplications = [] } = useQuery<any[]>({\n    queryKey: [\"/api/jobs/my-applications\"],\n    enabled: !!user,\n  });\n\n  const applyMutation = useMutation({\n    mutationFn: async (jobId: string) => {\n      await apiRequest(`/api/jobs/${jobId}/apply`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Submitted\",\n        description: \"Your job application has been submitted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs/my-applications\"] });\n    },\n  });\n\n  const filteredJobs = jobs.filter(job => {\n    const matchesSearch = !searchTerm || \n      job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      job.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      job.skills.some(skill => skill.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesLocation = !selectedLocation || job.location.toLowerCase().includes(selectedLocation.toLowerCase());\n    const matchesType = !selectedType || job.type === selectedType;\n    const matchesLevel = !selectedLevel || job.experienceLevel === selectedLevel;\n    \n    return matchesSearch && matchesLocation && matchesType && matchesLevel;\n  });\n\n  const hasApplied = (jobId: string) => {\n    return myApplications.some(app => app.jobId === jobId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Briefcase className=\"h-8 w-8 text-blue-600\" />\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n            Job Portal\n          </h1>\n        </div>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Discover career opportunities within our trusted community network\n        </p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{jobs.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Active Jobs</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{jobs.filter(j => j.isRemote).length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Remote Jobs</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">{jobs.filter(j => j.isUrgent).length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">Urgent Hiring</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">{myApplications.length}</div>\n            <div className=\"text-sm text-gray-600 dark:text-gray-400\">My Applications</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Post Job Button */}\n      {user && (\n        <Card className=\"bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Building className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium\">Hiring for your company?</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Post job openings and find talented community members\n                  </p>\n                </div>\n              </div>\n              <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-post-job\">\n                Post a Job\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Search Jobs\n          </CardTitle>\n          <CardDescription>\n            Find opportunities that match your skills and preferences\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <Input\n                id=\"search\"\n                placeholder=\"Job title, company, skills...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"City, State, Country\"\n                value={selectedLocation}\n                onChange={(e) => setSelectedLocation(e.target.value)}\n                data-testid=\"input-location\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"type\">Job Type</Label>\n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger data-testid=\"select-type\">\n                  <SelectValue placeholder=\"Select Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Types</SelectItem>\n                  <SelectItem value=\"full-time\">Full Time</SelectItem>\n                  <SelectItem value=\"part-time\">Part Time</SelectItem>\n                  <SelectItem value=\"contract\">Contract</SelectItem>\n                  <SelectItem value=\"remote\">Remote</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"level\">Experience Level</Label>\n              <Select value={selectedLevel} onValueChange={setSelectedLevel}>\n                <SelectTrigger data-testid=\"select-level\">\n                  <SelectValue placeholder=\"Select Level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Levels</SelectItem>\n                  <SelectItem value=\"entry\">Entry Level</SelectItem>\n                  <SelectItem value=\"mid\">Mid Level</SelectItem>\n                  <SelectItem value=\"senior\">Senior Level</SelectItem>\n                  <SelectItem value=\"executive\">Executive</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Job Listings */}\n      <div className=\"space-y-4\">\n        {filteredJobs.map((job) => (\n          <Card key={job.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex gap-4 flex-1\">\n                  {/* Company Logo */}\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={job.companyLogo} />\n                    <AvatarFallback className=\"bg-blue-100 text-blue-800\">\n                      {job.company[0]}\n                    </AvatarFallback>\n                  </Avatar>\n\n                  {/* Job Details */}\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <h3 className=\"font-semibold text-lg\" data-testid={`text-title-${job.id}`}>\n                            {job.title}\n                          </h3>\n                          {job.isUrgent && (\n                            <Badge className=\"bg-red-500 text-white\">Urgent</Badge>\n                          )}\n                          {job.isRemote && (\n                            <Badge variant=\"secondary\">Remote</Badge>\n                          )}\n                        </div>\n                        <p className=\"text-blue-600 font-medium\">{job.company}</p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400\">\n                      <div className=\"flex items-center gap-1\">\n                        <MapPin className=\"h-4 w-4\" />\n                        {job.location}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"h-4 w-4\" />\n                        {formatDistanceToNow(new Date(job.createdAt), { addSuffix: true })}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        {job.salaryRange}\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-4 w-4\" />\n                        {job.applicationsCount} applicants\n                      </div>\n                    </div>\n\n                    <p className=\"text-gray-700 dark:text-gray-300 line-clamp-2\">\n                      {job.description}\n                    </p>\n\n                    {/* Skills */}\n                    <div className=\"flex flex-wrap gap-1\">\n                      {job.skills.slice(0, 5).map((skill, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {skill}\n                        </Badge>\n                      ))}\n                      {job.skills.length > 5 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{job.skills.length - 5} more\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Posted By */}\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <Avatar className=\"h-6 w-6\">\n                        <AvatarImage src={job.postedBy.profileImageUrl} />\n                        <AvatarFallback className=\"text-xs\">\n                          {job.postedBy.firstName[0]}{job.postedBy.lastName[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-gray-600 dark:text-gray-400\">\n                        Posted by {job.postedBy.firstName} {job.postedBy.lastName}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex flex-col gap-2 ml-4\">\n                  <Button\n                    onClick={() => applyMutation.mutate(job.id)}\n                    disabled={applyMutation.isPending || hasApplied(job.id)}\n                    className={hasApplied(job.id) ? \"bg-green-600\" : \"bg-blue-600 hover:bg-blue-700\"}\n                    data-testid={`button-apply-${job.id}`}\n                  >\n                    {hasApplied(job.id) ? \"Applied\" : applyMutation.isPending ? \"Applying...\" : \"Apply Now\"}\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${job.id}`}>\n                    <ExternalLink className=\"h-4 w-4 mr-1\" />\n                    View Details\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredJobs.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Briefcase className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">No Jobs Found</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Try adjusting your search criteria to find more opportunities\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":14588},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Home, \n  Users, \n  MessageCircle, \n  Heart,\n  Calendar,\n  Briefcase,\n  HandHeart,\n  Globe,\n  Shield,\n  Lock,\n  ChevronRight,\n  Play\n} from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const handleSignup = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const features = [\n    {\n      icon: Users,\n      title: \"Smart Connections\",\n      description: \"Find community members by location, interests, profession, and cultural background. Build meaningful relationships that last.\",\n      color: \"text-primary-500\"\n    },\n    {\n      icon: MessageCircle,\n      title: \"Community Feed\",\n      description: \"Share updates, photos, and important announcements. Stay informed about community news and celebrations.\",\n      color: \"text-secondary-500\"\n    },\n    {\n      icon: HandHeart,\n      title: \"Emergency Help\",\n      description: \"Get instant assistance during emergencies. Our real-time help system connects you with nearby volunteers.\",\n      color: \"text-emergency-500\"\n    },\n    {\n      icon: Calendar,\n      title: \"Events & Gatherings\",\n      description: \"Organize and attend cultural events, festivals, and community gatherings. RSVP and stay updated.\",\n      color: \"text-accent-500\"\n    },\n    {\n      icon: Briefcase,\n      title: \"Business Network\",\n      description: \"Promote your business, find job opportunities, and collaborate with fellow entrepreneurs in the community.\",\n      color: \"text-green-500\"\n    },\n    {\n      icon: Heart,\n      title: \"Matrimony\",\n      description: \"Find life partners within the community with cultural compatibility and family involvement features.\",\n      color: \"text-pink-500\"\n    }\n  ];\n\n  const stats = [\n    { value: \"5,000+\", label: \"Active Members\" },\n    { value: \"20+\", label: \"Countries\" },\n    { value: \"500+\", label: \"Events Organized\" },\n    { value: \"1,200+\", label: \"Connections Made\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-lg flex items-center justify-center\">\n                  <Home className=\"text-white\" size={16} />\n                </div>\n                <span className=\"text-xl font-bold text-gray-900\">Digital House</span>\n              </div>\n            </div>\n            \n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-gray-600 hover:text-primary-600 transition-colors\">Features</a>\n              <a href=\"#community\" className=\"text-gray-600 hover:text-primary-600 transition-colors\">Community</a>\n              <a href=\"#about\" className=\"text-gray-600 hover:text-primary-600 transition-colors\">About</a>\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\"\n                onClick={handleLogin}\n                data-testid=\"button-signin\"\n              >\n                Sign In\n              </Button>\n              <Button \n                onClick={handleSignup}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n                data-testid=\"button-join\"\n              >\n                Join Community\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary-50 via-white to-accent-50 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h1 className=\"text-4xl lg:text-6xl font-bold text-gray-900 leading-tight mb-6\">\n                Reconnect with Your\n                <span className=\"text-gradient\">\n                  {\" \"}Community\n                </span>\n              </h1>\n              <p className=\"text-xl text-gray-600 mb-8 leading-relaxed\">\n                Digital House brings together members of our community from across India and abroad. Connect, collaborate, and preserve our rich cultural heritage together.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n                <Button \n                  size=\"lg\"\n                  onClick={handleSignup}\n                  className=\"bg-primary-500 hover:bg-primary-600 text-lg px-8 py-4 shadow-lg hover:shadow-xl transition-all transform hover:scale-105\"\n                  data-testid=\"button-get-started\"\n                >\n                  Get Started Free\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"text-lg px-8 py-4 border-2\"\n                  data-testid=\"button-learn-more\"\n                >\n                  <Play className=\"mr-2\" size={16} />\n                  Learn More\n                </Button>\n              </div>\n\n              <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"text-primary-500\" size={16} />\n                  <span>5000+ Members</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Globe className=\"text-secondary-500\" size={16} />\n                  <span>20+ Countries</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Shield className=\"text-accent-500\" size={16} />\n                  <span>Secure & Private</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1522202176988-66273c2fd55f?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Community members connecting\" \n                className=\"rounded-2xl shadow-2xl w-full h-auto\"\n              />\n              \n              {/* Floating cards */}\n              <Card className=\"absolute -bottom-6 -left-6 border-0 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-emergency-500 rounded-lg flex items-center justify-center\">\n                      <HandHeart className=\"text-white\" size={20} />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-gray-900\">Real-Time Help</p>\n                      <p className=\"text-sm text-gray-500\">Emergency assistance</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"absolute -top-6 -right-6 border-0 shadow-lg\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-secondary-500 rounded-lg flex items-center justify-center\">\n                      <Briefcase className=\"text-white\" size={20} />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-gray-900\">Business Network</p>\n                      <p className=\"text-sm text-gray-500\">Grow together</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Core Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-4\">\n              Everything You Need to Stay Connected\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              From personal networking to business opportunities, Digital House provides all the tools your community needs to thrive.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"card-hover border-0 bg-gray-50 group\">\n                <CardContent className=\"p-8\">\n                  <div className={`w-12 h-12 bg-current rounded-lg flex items-center justify-center mb-6 group-hover:scale-110 transition-transform ${feature.color}`}>\n                    <feature.icon className=\"text-white\" size={24} />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-4\">{feature.title}</h3>\n                  <p className=\"text-gray-600 leading-relaxed\">\n                    {feature.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Community Stats */}\n      <section id=\"community\" className=\"py-20 bg-gradient-to-r from-primary-500 to-accent-500\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl lg:text-4xl font-bold text-white mb-4\">\n              Growing Together Worldwide\n            </h2>\n            <p className=\"text-xl text-white text-opacity-90 max-w-3xl mx-auto\">\n              Our community spans across continents, bringing together thousands of members in a secure, private environment.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"text-4xl lg:text-5xl font-bold text-white mb-2\">{stat.value}</div>\n                <p className=\"text-white text-opacity-80 text-lg\">{stat.label}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl lg:text-4xl font-bold text-gray-900 mb-6\">\n            Ready to Join Digital House?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Be part of our growing community. Connect with fellow members, attend events, and preserve our cultural heritage together.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <Button \n              size=\"lg\"\n              onClick={handleSignup}\n              className=\"bg-primary-500 hover:bg-primary-600 text-lg px-8 py-4 shadow-lg hover:shadow-xl transition-all transform hover:scale-105\"\n              data-testid=\"button-join-now\"\n            >\n              Join Now - It's Free\n            </Button>\n            <Button \n              variant=\"outline\"\n              size=\"lg\"\n              className=\"text-lg px-8 py-4 border-2 border-primary-500 text-primary-600 hover:bg-primary-50\"\n              data-testid=\"button-contact\"\n            >\n              Contact Us\n            </Button>\n          </div>\n\n          <div className=\"flex items-center justify-center space-x-8 text-sm text-gray-500\">\n            <div className=\"flex items-center space-x-2\">\n              <Lock className=\"text-primary-500\" size={16} />\n              <span>100% Private</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"text-accent-500\" size={16} />\n              <span>Secure Platform</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"text-secondary-500\" size={16} />\n              <span>Community Verified</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-6\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-accent-500 rounded-lg flex items-center justify-center\">\n                  <Home className=\"text-white\" size={16} />\n                </div>\n                <span className=\"text-xl font-bold\">Digital House</span>\n              </div>\n              <p className=\"text-gray-400 leading-relaxed\">\n                Connecting our community members worldwide through technology, culture, and shared values.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold mb-6\">Features</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Community Feed</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Member Directory</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Events</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Business Network</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Emergency Help</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold mb-6\">Community</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Guidelines</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Support</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Privacy</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Terms of Service</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold mb-6\">Connect</h4>\n              <p className=\"text-gray-400 text-sm\">\n                Stay updated with community news and announcements.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-12 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 Digital House. All rights reserved. Built with ❤️ for our community.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":15051},"client/src/pages/matrimony.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Heart, Search, Filter, Star, MapPin, Briefcase, Calendar, Users, Sparkles } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MatrimonyProfile {\n  id: string;\n  userId: string;\n  firstName: string;\n  lastName: string;\n  profileImageUrl?: string;\n  age: number;\n  occupation: string;\n  location: string;\n  nativePlace: string;\n  kulam: string;\n  natchathiram: string;\n  education: string;\n  height: string;\n  interests: string[];\n  lookingFor: string;\n  isActive: boolean;\n  matchScore?: number;\n  createdAt: string;\n}\n\nexport default function Matrimony() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [ageRange, setAgeRange] = useState({ min: 18, max: 50 });\n  const [selectedKulam, setSelectedKulam] = useState(\"\");\n  const [selectedLocation, setSelectedLocation] = useState(\"\");\n\n  const { data: profiles = [], isLoading } = useQuery<MatrimonyProfile[]>({\n    queryKey: [\"/api/matrimony/profiles\", searchTerm, ageRange, selectedKulam, selectedLocation],\n  });\n\n  const { data: userProfile } = useQuery<MatrimonyProfile>({\n    queryKey: [\"/api/matrimony/my-profile\"],\n    enabled: !!user,\n  });\n\n  const interestMutation = useMutation({\n    mutationFn: async (profileId: string) => {\n      await apiRequest(`/api/matrimony/profiles/${profileId}/interest`, {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Interest Sent\",\n        description: \"Your interest has been sent successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/matrimony/profiles\"] });\n    },\n  });\n\n  const kulamOptions = [\n    \"Brahmin\", \"Kshatriya\", \"Vaishya\", \"Shudra\", \"Reddy\", \"Kamma\", \"Kapu\", \"Velama\",\n    \"Naidu\", \"Chettiar\", \"Mudaliar\", \"Pillai\", \"Nair\", \"Menon\", \"Other\"\n  ];\n\n  const filteredProfiles = profiles.filter(profile => {\n    const matchesSearch = !searchTerm || \n      `${profile.firstName} ${profile.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      profile.occupation.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      profile.location.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesAge = profile.age >= ageRange.min && profile.age <= ageRange.max;\n    const matchesKulam = !selectedKulam || profile.kulam === selectedKulam;\n    const matchesLocation = !selectedLocation || profile.location.includes(selectedLocation);\n    \n    return matchesSearch && matchesAge && matchesKulam && matchesLocation;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-pink-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <Heart className=\"h-8 w-8 text-pink-600\" />\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-pink-600 to-red-600 bg-clip-text text-transparent\">\n            Matrimony Portal\n          </h1>\n        </div>\n        <p className=\"text-gray-600 dark:text-gray-400\">\n          Find your perfect life partner within our trusted community\n        </p>\n      </div>\n\n      {/* User Profile Status */}\n      {user && (\n        <Card className=\"bg-gradient-to-r from-pink-50 to-red-50 dark:from-pink-900/20 dark:to-red-900/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Heart className=\"h-5 w-5 text-pink-600\" />\n                <div>\n                  <p className=\"font-medium\">Your Matrimony Profile</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {userProfile ? \"Profile active and visible\" : \"Create your profile to get started\"}\n                  </p>\n                </div>\n              </div>\n              <Button \n                variant={userProfile ? \"outline\" : \"default\"}\n                className={userProfile ? \"\" : \"bg-pink-600 hover:bg-pink-700\"}\n                data-testid=\"button-manage-profile\"\n              >\n                {userProfile ? \"Edit Profile\" : \"Create Profile\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Search & Filters\n          </CardTitle>\n          <CardDescription>\n            Find compatible matches based on your preferences\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <Label htmlFor=\"search\">Search</Label>\n              <Input\n                id=\"search\"\n                placeholder=\"Name, occupation, location...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"kulam\">Kulam</Label>\n              <Select value={selectedKulam} onValueChange={setSelectedKulam}>\n                <SelectTrigger data-testid=\"select-kulam\">\n                  <SelectValue placeholder=\"Select Kulam\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All Kulam</SelectItem>\n                  {kulamOptions.map(kulam => (\n                    <SelectItem key={kulam} value={kulam}>{kulam}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                placeholder=\"City, State, Country\"\n                value={selectedLocation}\n                onChange={(e) => setSelectedLocation(e.target.value)}\n                data-testid=\"input-location\"\n              />\n            </div>\n\n            <div>\n              <Label>Age Range</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  type=\"number\"\n                  placeholder=\"Min\"\n                  value={ageRange.min}\n                  onChange={(e) => setAgeRange(prev => ({ ...prev, min: parseInt(e.target.value) || 18 }))}\n                  className=\"w-20\"\n                  data-testid=\"input-age-min\"\n                />\n                <Input\n                  type=\"number\"\n                  placeholder=\"Max\"\n                  value={ageRange.max}\n                  onChange={(e) => setAgeRange(prev => ({ ...prev, max: parseInt(e.target.value) || 50 }))}\n                  className=\"w-20\"\n                  data-testid=\"input-age-max\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Results */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredProfiles.map((profile) => (\n          <Card key={profile.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-0\">\n              {/* Profile Image and Header */}\n              <div className=\"relative bg-gradient-to-br from-pink-100 to-red-100 dark:from-pink-900/30 dark:to-red-900/30 p-6\">\n                {profile.matchScore && (\n                  <div className=\"absolute top-3 right-3 bg-white dark:bg-gray-800 rounded-full px-2 py-1 text-xs font-semibold flex items-center gap-1\">\n                    <Sparkles className=\"h-3 w-3 text-yellow-500\" />\n                    {profile.matchScore}% Match\n                  </div>\n                )}\n                \n                <div className=\"text-center\">\n                  <Avatar className=\"h-20 w-20 mx-auto mb-3\">\n                    <AvatarImage src={profile.profileImageUrl} />\n                    <AvatarFallback className=\"text-lg bg-pink-200 text-pink-800\">\n                      {profile.firstName[0]}{profile.lastName[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <h3 className=\"font-semibold text-lg\" data-testid={`text-name-${profile.id}`}>\n                    {profile.firstName} {profile.lastName}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {profile.age} years old\n                  </p>\n                </div>\n              </div>\n\n              {/* Profile Details */}\n              <div className=\"p-4 space-y-3\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Briefcase className=\"h-4 w-4 text-blue-500\" />\n                  <span className=\"font-medium\">{profile.occupation}</span>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm\">\n                  <MapPin className=\"h-4 w-4 text-green-500\" />\n                  <span>{profile.location}</span>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  <div>\n                    <span className=\"font-medium\">Kulam:</span> {profile.kulam}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Native:</span> {profile.nativePlace}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Star:</span> {profile.natchathiram}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Height:</span> {profile.height}\n                  </div>\n                </div>\n\n                {profile.interests && profile.interests.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {profile.interests.slice(0, 3).map((interest, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {interest}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Button\n                    onClick={() => interestMutation.mutate(profile.id)}\n                    disabled={interestMutation.isPending}\n                    className=\"flex-1 bg-pink-600 hover:bg-pink-700\"\n                    size=\"sm\"\n                    data-testid={`button-interest-${profile.id}`}\n                  >\n                    <Heart className=\"h-4 w-4 mr-1\" />\n                    {interestMutation.isPending ? \"Sending...\" : \"Express Interest\"}\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${profile.id}`}>\n                    View Profile\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredProfiles.length === 0 && (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Heart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"font-semibold text-lg mb-2\">No Profiles Found</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Try adjusting your search criteria to find more matches\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":12363},"client/src/pages/members.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport Navigation from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search, MapPin, Briefcase, UserPlus, Users, Filter } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Members() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  // Fetch members\n  const { data: members, isLoading: membersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users/search\", { q: debouncedQuery, limit: \"20\" }],\n    enabled: !!debouncedQuery && debouncedQuery.length >= 2,\n    retry: false,\n  });\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading members...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <Navigation />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Community Members</h1>\n          <p className=\"text-gray-600\">Connect with fellow community members worldwide</p>\n        </div>\n\n        {/* Search Bar */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={20} />\n                <Input\n                  placeholder=\"Search by name, location, profession, or native place...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Button variant=\"outline\" data-testid=\"button-filter\">\n                <Filter size={16} className=\"mr-2\" />\n                Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Search Results */}\n        {searchQuery.length >= 2 ? (\n          <div>\n            {membersLoading ? (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(6)].map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start space-x-4\">\n                        <Skeleton className=\"w-16 h-16 rounded-full\" />\n                        <div className=\"flex-1 space-y-2\">\n                          <Skeleton className=\"h-5 w-32\" />\n                          <Skeleton className=\"h-4 w-24\" />\n                          <Skeleton className=\"h-4 w-20\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : members && members.length > 0 ? (\n              <div>\n                <div className=\"mb-6\">\n                  <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    Search Results ({members.length})\n                  </h2>\n                  <p className=\"text-gray-600\">Found {members.length} members matching \"{debouncedQuery}\"</p>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {members.map((member) => (\n                    <Card key={member.id} className=\"hover:shadow-lg transition-shadow\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-4 mb-4\">\n                          <Avatar className=\"h-16 w-16\">\n                            <AvatarImage src={member.profileImageUrl || \"\"} alt={`${member.firstName} ${member.lastName}`} />\n                            <AvatarFallback className=\"bg-primary-500 text-white\">\n                              {(member.firstName?.[0] || \"\") + (member.lastName?.[0] || \"\")}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-semibold text-gray-900 truncate\" data-testid={`text-name-${member.id}`}>\n                              {member.firstName} {member.lastName}\n                            </h3>\n                            {member.location && (\n                              <div className=\"flex items-center space-x-1 text-gray-600 mb-1\">\n                                <MapPin size={14} />\n                                <span className=\"text-sm truncate\" data-testid={`text-location-${member.id}`}>\n                                  {member.location}\n                                </span>\n                              </div>\n                            )}\n                            {member.occupation && (\n                              <div className=\"flex items-center space-x-1 text-gray-600 mb-2\">\n                                <Briefcase size={14} />\n                                <span className=\"text-sm truncate\" data-testid={`text-occupation-${member.id}`}>\n                                  {member.occupation}\n                                </span>\n                              </div>\n                            )}\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                                {member.role}\n                              </Badge>\n                              {member.isVerified && (\n                                <Badge variant=\"default\" className=\"text-xs bg-green-500\">\n                                  Verified\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {member.nativePlace && (\n                          <div className=\"mb-4\">\n                            <p className=\"text-sm text-gray-600\">\n                              <strong>Native Place:</strong> {member.nativePlace}\n                            </p>\n                          </div>\n                        )}\n\n                        {member.aboutMe && (\n                          <div className=\"mb-4\">\n                            <p className=\"text-sm text-gray-700 line-clamp-2\">\n                              {member.aboutMe}\n                            </p>\n                          </div>\n                        )}\n\n                        <div className=\"flex justify-between items-center pt-4 border-t border-gray-100\">\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-primary-500 hover:bg-primary-600\"\n                            data-testid={`button-connect-${member.id}`}\n                          >\n                            <UserPlus size={14} className=\"mr-1\" />\n                            Connect\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${member.id}`}>\n                            View Profile\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"p-12 text-center\">\n                  <Users className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No members found</h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    No members match your search for \"{debouncedQuery}\". Try different keywords.\n                  </p>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setSearchQuery(\"\")}\n                    data-testid=\"button-clear-search\"\n                  >\n                    Clear Search\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        ) : (\n          /* Default State */\n          <div className=\"text-center py-16\">\n            <div className=\"mx-auto w-24 h-24 bg-primary-50 rounded-full flex items-center justify-center mb-6\">\n              <Users className=\"h-12 w-12 text-primary-500\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Discover Community Members\n            </h2>\n            <p className=\"text-gray-600 max-w-2xl mx-auto mb-8\">\n              Start searching to find and connect with fellow community members. You can search by name, location, profession, native place, and more.\n            </p>\n            <div className=\"bg-white rounded-xl p-8 max-w-md mx-auto border border-gray-200\">\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Search Tips:</h3>\n              <ul className=\"text-sm text-gray-600 space-y-2 text-left\">\n                <li>• Search by name (first or last name)</li>\n                <li>• Find members by current location</li>\n                <li>• Discover people in your profession</li>\n                <li>• Connect with those from your native place</li>\n                <li>• Look for specific skills or interests</li>\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11073},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Navigation from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User, MapPin, Briefcase, Phone, Mail, Edit3, Save, X } from \"lucide-react\";\nimport type { User as UserType } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState<Partial<UserType>>({});\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Initialize form data when user data is available\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        phoneNumber: user.phoneNumber || \"\",\n        location: user.location || \"\",\n        nativePlace: user.nativePlace || \"\",\n        kulam: user.kulam || \"\",\n        natchathiram: user.natchathiram || \"\",\n        occupation: user.occupation || \"\",\n        aboutMe: user.aboutMe || \"\",\n        role: user.role || \"individual\",\n        profileVisibility: user.profileVisibility || \"public\",\n      });\n    }\n  }, [user]);\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: Partial<UserType>) => {\n      await apiRequest(\"PUT\", \"/api/users/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    if (user) {\n      setFormData({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        email: user.email || \"\",\n        phoneNumber: user.phoneNumber || \"\",\n        location: user.location || \"\",\n        nativePlace: user.nativePlace || \"\",\n        kulam: user.kulam || \"\",\n        natchathiram: user.natchathiram || \"\",\n        occupation: user.occupation || \"\",\n        aboutMe: user.aboutMe || \"\",\n        role: user.role || \"individual\",\n        profileVisibility: user.profileVisibility || \"public\",\n      });\n    }\n    setIsEditing(false);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <Navigation />\n      \n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Profile Header */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-start justify-between mb-6\">\n              <div className=\"flex items-center space-x-6\">\n                <Avatar className=\"h-24 w-24\">\n                  <AvatarImage src={user.profileImageUrl || \"\"} alt={`${user.firstName} ${user.lastName}`} />\n                  <AvatarFallback className=\"text-xl bg-primary-500 text-white\">\n                    {(user.firstName?.[0] || \"\") + (user.lastName?.[0] || \"\")}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-name\">\n                    {user.firstName} {user.lastName}\n                  </h1>\n                  <div className=\"flex items-center space-x-4 text-gray-600 mb-3\">\n                    {user.location && (\n                      <div className=\"flex items-center space-x-1\">\n                        <MapPin size={16} />\n                        <span data-testid=\"text-location\">{user.location}</span>\n                      </div>\n                    )}\n                    {user.occupation && (\n                      <div className=\"flex items-center space-x-1\">\n                        <Briefcase size={16} />\n                        <span data-testid=\"text-occupation\">{user.occupation}</span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {user.role}\n                    </Badge>\n                    <Badge \n                      variant={user.isVerified ? \"default\" : \"secondary\"}\n                      className={user.isVerified ? \"bg-green-500\" : \"\"}\n                    >\n                      {user.isVerified ? \"Verified\" : \"Unverified\"}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <Button\n                onClick={() => isEditing ? handleCancel() : setIsEditing(true)}\n                variant={isEditing ? \"outline\" : \"default\"}\n                className={isEditing ? \"\" : \"bg-primary-500 hover:bg-primary-600\"}\n                data-testid={isEditing ? \"button-cancel\" : \"button-edit\"}\n              >\n                {isEditing ? (\n                  <>\n                    <X size={16} className=\"mr-2\" />\n                    Cancel\n                  </>\n                ) : (\n                  <>\n                    <Edit3 size={16} className=\"mr-2\" />\n                    Edit Profile\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {user.aboutMe && (\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">About Me</h3>\n                <p className=\"text-gray-700\" data-testid=\"text-about\">{user.aboutMe}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <User size={20} />\n                <span>Personal Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={formData.firstName || \"\"}\n                    onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                    disabled={!isEditing}\n                    data-testid=\"input-firstName\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={formData.lastName || \"\"}\n                    onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                    disabled={!isEditing}\n                    data-testid=\"input-lastName\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Mail size={16} className=\"text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email || \"\"}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    disabled={!isEditing}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Phone size={16} className=\"text-gray-400\" />\n                  <Input\n                    id=\"phoneNumber\"\n                    value={formData.phoneNumber || \"\"}\n                    onChange={(e) => handleInputChange(\"phoneNumber\", e.target.value)}\n                    disabled={!isEditing}\n                    placeholder=\"+91 XXXXXXXXXX\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"location\">Current Location</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <MapPin size={16} className=\"text-gray-400\" />\n                  <Input\n                    id=\"location\"\n                    value={formData.location || \"\"}\n                    onChange={(e) => handleInputChange(\"location\", e.target.value)}\n                    disabled={!isEditing}\n                    placeholder=\"City, State/Country\"\n                    data-testid=\"input-location\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"occupation\">Occupation</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Briefcase size={16} className=\"text-gray-400\" />\n                  <Input\n                    id=\"occupation\"\n                    value={formData.occupation || \"\"}\n                    onChange={(e) => handleInputChange(\"occupation\", e.target.value)}\n                    disabled={!isEditing}\n                    placeholder=\"Your profession\"\n                    data-testid=\"input-occupation\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"aboutMe\">About Me</Label>\n                <Textarea\n                  id=\"aboutMe\"\n                  value={formData.aboutMe || \"\"}\n                  onChange={(e) => handleInputChange(\"aboutMe\", e.target.value)}\n                  disabled={!isEditing}\n                  placeholder=\"Tell us about yourself...\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-about\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Community Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Community Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"nativePlace\">Native Place</Label>\n                <Input\n                  id=\"nativePlace\"\n                  value={formData.nativePlace || \"\"}\n                  onChange={(e) => handleInputChange(\"nativePlace\", e.target.value)}\n                  disabled={!isEditing}\n                  placeholder=\"Your ancestral place\"\n                  data-testid=\"input-nativePlace\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"kulam\">Kulam</Label>\n                <Input\n                  id=\"kulam\"\n                  value={formData.kulam || \"\"}\n                  onChange={(e) => handleInputChange(\"kulam\", e.target.value)}\n                  disabled={!isEditing}\n                  placeholder=\"Your kulam\"\n                  data-testid=\"input-kulam\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"natchathiram\">Natchathiram</Label>\n                <Input\n                  id=\"natchathiram\"\n                  value={formData.natchathiram || \"\"}\n                  onChange={(e) => handleInputChange(\"natchathiram\", e.target.value)}\n                  disabled={!isEditing}\n                  placeholder=\"Your natchathiram\"\n                  data-testid=\"input-natchathiram\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"role\">Account Type</Label>\n                <Select\n                  value={formData.role || \"individual\"}\n                  onValueChange={(value) => handleInputChange(\"role\", value)}\n                  disabled={!isEditing}\n                >\n                  <SelectTrigger data-testid=\"select-role\">\n                    <SelectValue placeholder=\"Select account type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"individual\">Individual</SelectItem>\n                    <SelectItem value=\"business\">Business</SelectItem>\n                    <SelectItem value=\"organization\">Organization</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"profileVisibility\">Profile Visibility</Label>\n                <Select\n                  value={formData.profileVisibility || \"public\"}\n                  onValueChange={(value) => handleInputChange(\"profileVisibility\", value)}\n                  disabled={!isEditing}\n                >\n                  <SelectTrigger data-testid=\"select-visibility\">\n                    <SelectValue placeholder=\"Select visibility\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"public\">Public</SelectItem>\n                    <SelectItem value=\"friends\">Friends Only</SelectItem>\n                    <SelectItem value=\"private\">Private</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {isEditing && (\n                <div className=\"pt-4\">\n                  <Button\n                    onClick={handleSave}\n                    disabled={updateProfileMutation.isPending}\n                    className=\"w-full bg-primary-500 hover:bg-primary-600\"\n                    data-testid=\"button-save\"\n                  >\n                    {updateProfileMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    ) : (\n                      <>\n                        <Save size={16} className=\"mr-2\" />\n                        Save Changes\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16135},"client/src/pages/version-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\nimport { Sparkles, Users, Calendar, Shield, MessageCircle, Camera, Briefcase, Heart, Trophy, Globe } from \"lucide-react\";\n\nexport default function VersionSelector() {\n  const [, setLocation] = useLocation();\n\n  const handleVersionSelect = (version: string) => {\n    localStorage.setItem('digital-house-version', version);\n    setLocation('/');\n  };\n\n  const currentVersion = localStorage.getItem('digital-house-version') || 'v1';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 dark:from-gray-900 dark:via-purple-900 dark:to-blue-900 p-6\">\n      <div className=\"container mx-auto max-w-6xl\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Choose Your Digital House Experience\n          </h1>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400\">\n            Select the version that best suits your community networking needs\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Version 1.0 */}\n          <Card className={`relative overflow-hidden transition-all duration-300 hover:shadow-xl ${currentVersion === 'v1' ? 'ring-2 ring-blue-500' : ''}`}>\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-2xl\">Digital House v1.0</CardTitle>\n                <Badge variant=\"secondary\">Classic</Badge>\n              </div>\n              <CardDescription>\n                Essential community networking platform with core features\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Users className=\"h-4 w-4 text-blue-500\" />\n                  <span>Member Profiles</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <MessageCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Social Posts</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Calendar className=\"h-4 w-4 text-purple-500\" />\n                  <span>Events System</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Shield className=\"h-4 w-4 text-red-500\" />\n                  <span>Emergency Help</span>\n                </div>\n              </div>\n              \n              <div className=\"pt-4 border-t\">\n                <h4 className=\"font-semibold mb-2\">Perfect for:</h4>\n                <ul className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1\">\n                  <li>• Basic community connections</li>\n                  <li>• Event organization</li>\n                  <li>• Simple social networking</li>\n                  <li>• Emergency assistance</li>\n                </ul>\n              </div>\n\n              <Button \n                onClick={() => handleVersionSelect('v1')}\n                className=\"w-full\"\n                variant={currentVersion === 'v1' ? \"default\" : \"outline\"}\n                data-testid=\"button-select-v1\"\n              >\n                {currentVersion === 'v1' ? 'Currently Selected' : 'Select Classic Version'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Version 2.0 */}\n          <Card className={`relative overflow-hidden transition-all duration-300 hover:shadow-xl ${currentVersion === 'v2' ? 'ring-2 ring-purple-500' : ''}`}>\n            <div className=\"absolute top-0 right-0 bg-gradient-to-l from-purple-500 to-blue-500 text-white px-3 py-1 text-xs font-semibold\">\n              ENHANCED\n            </div>\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-2xl flex items-center gap-2\">\n                  Digital House v2.0\n                  <Sparkles className=\"h-5 w-5 text-purple-500\" />\n                </CardTitle>\n                <Badge className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white\">\n                  Advanced\n                </Badge>\n              </div>\n              <CardDescription>\n                Next-generation platform with AI-powered features and advanced networking\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Heart className=\"h-4 w-4 text-pink-500\" />\n                  <span>Matrimony AI</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Briefcase className=\"h-4 w-4 text-blue-500\" />\n                  <span>Job Portal</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Camera className=\"h-4 w-4 text-green-500\" />\n                  <span>Stories & Media</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Trophy className=\"h-4 w-4 text-yellow-500\" />\n                  <span>Achievements</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Globe className=\"h-4 w-4 text-indigo-500\" />\n                  <span>Business Hub</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Sparkles className=\"h-4 w-4 text-purple-500\" />\n                  <span>AI Recommendations</span>\n                </div>\n              </div>\n              \n              <div className=\"pt-4 border-t\">\n                <h4 className=\"font-semibold mb-2\">Perfect for:</h4>\n                <ul className=\"text-sm text-gray-600 dark:text-gray-400 space-y-1\">\n                  <li>• Advanced community engagement</li>\n                  <li>• Professional networking</li>\n                  <li>• Matrimony matching</li>\n                  <li>• Business opportunities</li>\n                  <li>• AI-powered recommendations</li>\n                </ul>\n              </div>\n\n              <Button \n                onClick={() => handleVersionSelect('v2')}\n                className=\"w-full bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600\"\n                variant={currentVersion === 'v2' ? \"default\" : \"outline\"}\n                data-testid=\"button-select-v2\"\n              >\n                {currentVersion === 'v2' ? 'Currently Selected' : 'Select Advanced Version'}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"mt-12 text-center\">\n          <Card className=\"max-w-2xl mx-auto bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-gray-700\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold mb-3\">Version Comparison</h3>\n              <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <h4 className=\"font-medium text-blue-600 dark:text-blue-400 mb-2\">Version 1.0 Features</h4>\n                  <ul className=\"space-y-1 text-gray-600 dark:text-gray-400\">\n                    <li>✓ Basic profiles and connections</li>\n                    <li>✓ Simple event management</li>\n                    <li>✓ Emergency help desk</li>\n                    <li>✓ Social posts and comments</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-purple-600 dark:text-purple-400 mb-2\">Version 2.0 Additional Features</h4>\n                  <ul className=\"space-y-1 text-gray-600 dark:text-gray-400\">\n                    <li>✓ All v1.0 features plus:</li>\n                    <li>✓ AI-powered matrimony matching</li>\n                    <li>✓ Job portal and business hub</li>\n                    <li>✓ Stories and rich media</li>\n                    <li>✓ Achievement system</li>\n                    <li>✓ Smart recommendations</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8778},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}